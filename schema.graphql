### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AdCheckAddress {
  mainWallet: MainWallet
  walletAddress: MainWalletAddress
}

type AddTransactionPayload {
  success: Boolean
}

type AdminAuthPayload {
  token: String
  user: User
}

type AdminConvertionPair {
  buy_fee_flat: Float
  buy_fee_pct: Float
  buy_max_amount: Float
  buy_min_amount: Float
  ConvertionTransaction: ConvertionTransaction
  createdAt: String
  Currency: Currency
  currency_id: String
  id: String
  is_enable: Boolean
  max_convert_in: Float
  max_convert_out: Float
  name: String
  sell_fee_flat: Float
  sell_fee_pct: Float
  sell_max_amount: Float
  sell_min_amount: Float
  total_convert_in: Float
  total_convert_out: Float
  updatedAt: String
}

type AdminCurrency {
  admin_config_price: Float
  admin_config_price_price_step: Float
  admin_config_price_volume_step: Float
  admin_config_total_volume: Float
  admin_config_volume_cache_time: DateTime
  crypto_data: Json
  disclaimer_deposit: String
  disclaimer_withdraw: String
  icon: String
  id: String
  instruction_deposit: String
  instruction_withdraw: String
  is_enable: Boolean
  is_enable_deposit: Boolean
  is_enable_withdraw: Boolean
  is_enable_withdraw_cron: Boolean
  max_daily_withdraw: Float
  max_daily_withdraw_verified: Float
  max_withdraw: Float
  min_withdraw: Float
  name: String
  regex: String
  required_confirmation: Int
  symbol: String
  withdraw_fee_flat: Float
  withdraw_fee_pct: Float
  withdraw_manual_threshold: Float
}

type AdminPorfolio {
  commission: Float
  email: String
  exchange_wallets: Json
  f1_count: Int
  lose_amount: Float
  lose_count: Int
  main_wallets: Json
  net_profit: Float
  order_count: Int
  ref_count: Int
  trade_amount: Float
  transfer: Json
  tx_by_wallet: Json
  user_id: String
  username: String
  win_amount: Float
  win_count: Int
  win_rate: Float
}

type AdminRefTreePayload {
  id: Int
  sponsor_id: String
  user_id: String
  username: String
  volume: Float
}

type AdminUsersAggregate {
  count: Int
}

enum ApprovedStatus {
  APPROVED
  REJECTED
}

type AuthPayload {
  hasTwoFactor: Boolean
  token: String
  user: User
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input BuyPromotionCodeTransactionCreateManyUserInput {
  amount_per_code: Float!
  createdAt: DateTime
  id: String
  quantity: Int!
  updatedAt: DateTime
}

input BuyPromotionCodeTransactionCreateManyUserInputEnvelope {
  data: [BuyPromotionCodeTransactionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput {
  connect: [BuyPromotionCodeTransactionWhereUniqueInput!]
  connectOrCreate: [BuyPromotionCodeTransactionCreateOrConnectWithoutUserInput!]
  create: [BuyPromotionCodeTransactionCreateWithoutUserInput!]
  createMany: BuyPromotionCodeTransactionCreateManyUserInputEnvelope
}

input BuyPromotionCodeTransactionCreateNestedOneWithoutPromotionCodeInput {
  connect: BuyPromotionCodeTransactionWhereUniqueInput
  connectOrCreate: BuyPromotionCodeTransactionCreateOrConnectWithoutPromotionCodeInput
  create: BuyPromotionCodeTransactionCreateWithoutPromotionCodeInput
}

input BuyPromotionCodeTransactionCreateOrConnectWithoutPromotionCodeInput {
  create: BuyPromotionCodeTransactionCreateWithoutPromotionCodeInput!
  where: BuyPromotionCodeTransactionWhereUniqueInput!
}

input BuyPromotionCodeTransactionCreateOrConnectWithoutUserInput {
  create: BuyPromotionCodeTransactionCreateWithoutUserInput!
  where: BuyPromotionCodeTransactionWhereUniqueInput!
}

input BuyPromotionCodeTransactionCreateWithoutPromotionCodeInput {
  amount_per_code: Float!
  createdAt: DateTime
  id: String
  quantity: Int!
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutBuyPromotionCodeTransactionInput!
}

input BuyPromotionCodeTransactionCreateWithoutUserInput {
  amount_per_code: Float!
  createdAt: DateTime
  id: String
  PromotionCode: PromotionCodeCreateNestedManyWithoutBuyPromotionCodeTransactionInput
  quantity: Int!
  updatedAt: DateTime
}

input BuyPromotionCodeTransactionScalarWhereInput {
  amount_per_code: FloatFilter
  AND: [BuyPromotionCodeTransactionScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [BuyPromotionCodeTransactionScalarWhereInput!]
  OR: [BuyPromotionCodeTransactionScalarWhereInput!]
  quantity: IntFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

input BuyPromotionCodeTransactionUpdateManyMutationInput {
  amount_per_code: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BuyPromotionCodeTransactionUpdateManyWithoutUserInput {
  connect: [BuyPromotionCodeTransactionWhereUniqueInput!]
  connectOrCreate: [BuyPromotionCodeTransactionCreateOrConnectWithoutUserInput!]
  create: [BuyPromotionCodeTransactionCreateWithoutUserInput!]
  createMany: BuyPromotionCodeTransactionCreateManyUserInputEnvelope
  delete: [BuyPromotionCodeTransactionWhereUniqueInput!]
  deleteMany: [BuyPromotionCodeTransactionScalarWhereInput!]
  disconnect: [BuyPromotionCodeTransactionWhereUniqueInput!]
  set: [BuyPromotionCodeTransactionWhereUniqueInput!]
  update: [BuyPromotionCodeTransactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BuyPromotionCodeTransactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [BuyPromotionCodeTransactionUpsertWithWhereUniqueWithoutUserInput!]
}

input BuyPromotionCodeTransactionUpdateManyWithWhereWithoutUserInput {
  data: BuyPromotionCodeTransactionUpdateManyMutationInput!
  where: BuyPromotionCodeTransactionScalarWhereInput!
}

input BuyPromotionCodeTransactionUpdateOneWithoutPromotionCodeInput {
  connect: BuyPromotionCodeTransactionWhereUniqueInput
  connectOrCreate: BuyPromotionCodeTransactionCreateOrConnectWithoutPromotionCodeInput
  create: BuyPromotionCodeTransactionCreateWithoutPromotionCodeInput
  delete: Boolean
  disconnect: Boolean
  update: BuyPromotionCodeTransactionUpdateWithoutPromotionCodeInput
  upsert: BuyPromotionCodeTransactionUpsertWithoutPromotionCodeInput
}

input BuyPromotionCodeTransactionUpdateWithoutPromotionCodeInput {
  amount_per_code: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutBuyPromotionCodeTransactionInput
}

input BuyPromotionCodeTransactionUpdateWithoutUserInput {
  amount_per_code: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  PromotionCode: PromotionCodeUpdateManyWithoutBuyPromotionCodeTransactionInput
  quantity: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BuyPromotionCodeTransactionUpdateWithWhereUniqueWithoutUserInput {
  data: BuyPromotionCodeTransactionUpdateWithoutUserInput!
  where: BuyPromotionCodeTransactionWhereUniqueInput!
}

input BuyPromotionCodeTransactionUpsertWithoutPromotionCodeInput {
  create: BuyPromotionCodeTransactionCreateWithoutPromotionCodeInput!
  update: BuyPromotionCodeTransactionUpdateWithoutPromotionCodeInput!
}

input BuyPromotionCodeTransactionUpsertWithWhereUniqueWithoutUserInput {
  create: BuyPromotionCodeTransactionCreateWithoutUserInput!
  update: BuyPromotionCodeTransactionUpdateWithoutUserInput!
  where: BuyPromotionCodeTransactionWhereUniqueInput!
}

input BuyPromotionCodeTransactionWhereUniqueInput {
  id: String
}

type ClockSubscriptionPayload {
  countDown: Int
  enable: Boolean
}

type CoinheAuthPayload {
  ctoken: String
  hasTwoFactor: Boolean
  token: String
  user: User
}

type CoinheIDAuthMessagePayload {
  message: String
  redirectUrl: String
}

type CoinPayload {
  icon: String
  name: String
  price: Float
  priceChange: Float
  symbol: String
  volume: Float
}

type ConvertCurrencyPayload {
  success: Boolean
}

type ConvertionAggregate {
  count: Int
}

type ConvertionConnectionPayload {
  nodes: [ConvertionTransaction]
  total: Int
}

type ConvertionDetail {
  amount: Float
  converted_amount: Float
  symbol: String
}

enum ConvertionDirection {
  EXCHANGE_TO_MAIN
  MAIN_TO_EXCHANGE
  MAIN_TO_MAIN
}

input ConvertionPairCreateManyCurrencyFromInput {
  buy_fee_flat: Float
  buy_fee_pct: Float
  buy_max_amount: Float
  buy_min_amount: Float
  createdAt: DateTime
  currency_to: String!
  id: String
  is_enable: Boolean
  name: String!
  sell_fee_flat: Float
  sell_fee_pct: Float
  sell_max_amount: Float
  sell_min_amount: Float
  updatedAt: DateTime
}

input ConvertionPairCreateManyCurrencyFromInputEnvelope {
  data: [ConvertionPairCreateManyCurrencyFromInput!]
  skipDuplicates: Boolean
}

input ConvertionPairCreateManyCurrencyToInput {
  buy_fee_flat: Float
  buy_fee_pct: Float
  buy_max_amount: Float
  buy_min_amount: Float
  createdAt: DateTime
  currency_from: String!
  id: String
  is_enable: Boolean
  name: String!
  sell_fee_flat: Float
  sell_fee_pct: Float
  sell_max_amount: Float
  sell_min_amount: Float
  updatedAt: DateTime
}

input ConvertionPairCreateManyCurrencyToInputEnvelope {
  data: [ConvertionPairCreateManyCurrencyToInput!]
  skipDuplicates: Boolean
}

input ConvertionPairCreateNestedManyWithoutCurrencyFromInput {
  connect: [ConvertionPairWhereUniqueInput!]
  connectOrCreate: [ConvertionPairCreateOrConnectWithoutCurrencyFromInput!]
  create: [ConvertionPairCreateWithoutCurrencyFromInput!]
  createMany: ConvertionPairCreateManyCurrencyFromInputEnvelope
}

input ConvertionPairCreateNestedManyWithoutCurrencyToInput {
  connect: [ConvertionPairWhereUniqueInput!]
  connectOrCreate: [ConvertionPairCreateOrConnectWithoutCurrencyToInput!]
  create: [ConvertionPairCreateWithoutCurrencyToInput!]
  createMany: ConvertionPairCreateManyCurrencyToInputEnvelope
}

input ConvertionPairCreateNestedOneWithoutConvertionTransactionInput {
  connect: ConvertionPairWhereUniqueInput
  connectOrCreate: ConvertionPairCreateOrConnectWithoutConvertionTransactionInput
  create: ConvertionPairCreateWithoutConvertionTransactionInput
}

input ConvertionPairCreateOrConnectWithoutConvertionTransactionInput {
  create: ConvertionPairCreateWithoutConvertionTransactionInput!
  where: ConvertionPairWhereUniqueInput!
}

input ConvertionPairCreateOrConnectWithoutCurrencyFromInput {
  create: ConvertionPairCreateWithoutCurrencyFromInput!
  where: ConvertionPairWhereUniqueInput!
}

input ConvertionPairCreateOrConnectWithoutCurrencyToInput {
  create: ConvertionPairCreateWithoutCurrencyToInput!
  where: ConvertionPairWhereUniqueInput!
}

input ConvertionPairCreateWithoutConvertionTransactionInput {
  buy_fee_flat: Float
  buy_fee_pct: Float
  buy_max_amount: Float
  buy_min_amount: Float
  createdAt: DateTime
  CurrencyFrom: CurrencyCreateNestedOneWithoutConvertionPairFromInput!
  CurrencyTo: CurrencyCreateNestedOneWithoutConvertionPairToInput!
  id: String
  is_enable: Boolean
  name: String!
  sell_fee_flat: Float
  sell_fee_pct: Float
  sell_max_amount: Float
  sell_min_amount: Float
  updatedAt: DateTime
}

input ConvertionPairCreateWithoutCurrencyFromInput {
  buy_fee_flat: Float
  buy_fee_pct: Float
  buy_max_amount: Float
  buy_min_amount: Float
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutConvertionPairInput
  createdAt: DateTime
  CurrencyTo: CurrencyCreateNestedOneWithoutConvertionPairToInput!
  id: String
  is_enable: Boolean
  name: String!
  sell_fee_flat: Float
  sell_fee_pct: Float
  sell_max_amount: Float
  sell_min_amount: Float
  updatedAt: DateTime
}

input ConvertionPairCreateWithoutCurrencyToInput {
  buy_fee_flat: Float
  buy_fee_pct: Float
  buy_max_amount: Float
  buy_min_amount: Float
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutConvertionPairInput
  createdAt: DateTime
  CurrencyFrom: CurrencyCreateNestedOneWithoutConvertionPairFromInput!
  id: String
  is_enable: Boolean
  name: String!
  sell_fee_flat: Float
  sell_fee_pct: Float
  sell_max_amount: Float
  sell_min_amount: Float
  updatedAt: DateTime
}

input ConvertionPairScalarWhereInput {
  AND: [ConvertionPairScalarWhereInput!]
  buy_fee_flat: FloatNullableFilter
  buy_fee_pct: FloatNullableFilter
  buy_max_amount: FloatNullableFilter
  buy_min_amount: FloatNullableFilter
  createdAt: DateTimeFilter
  currency_from: StringFilter
  currency_to: StringFilter
  id: StringFilter
  is_enable: BoolFilter
  name: StringFilter
  NOT: [ConvertionPairScalarWhereInput!]
  OR: [ConvertionPairScalarWhereInput!]
  sell_fee_flat: FloatNullableFilter
  sell_fee_pct: FloatNullableFilter
  sell_max_amount: FloatNullableFilter
  sell_min_amount: FloatNullableFilter
  updatedAt: DateTimeFilter
}

input ConvertionPairUpdateInput {
  buy_fee_flat: NullableFloatFieldUpdateOperationsInput
  buy_fee_pct: NullableFloatFieldUpdateOperationsInput
  buy_max_amount: NullableFloatFieldUpdateOperationsInput
  buy_min_amount: NullableFloatFieldUpdateOperationsInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutConvertionPairInput
  createdAt: DateTimeFieldUpdateOperationsInput
  CurrencyFrom: CurrencyUpdateOneRequiredWithoutConvertionPairFromInput
  CurrencyTo: CurrencyUpdateOneRequiredWithoutConvertionPairToInput
  id: StringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  sell_fee_flat: NullableFloatFieldUpdateOperationsInput
  sell_fee_pct: NullableFloatFieldUpdateOperationsInput
  sell_max_amount: NullableFloatFieldUpdateOperationsInput
  sell_min_amount: NullableFloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConvertionPairUpdateManyMutationInput {
  buy_fee_flat: NullableFloatFieldUpdateOperationsInput
  buy_fee_pct: NullableFloatFieldUpdateOperationsInput
  buy_max_amount: NullableFloatFieldUpdateOperationsInput
  buy_min_amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  sell_fee_flat: NullableFloatFieldUpdateOperationsInput
  sell_fee_pct: NullableFloatFieldUpdateOperationsInput
  sell_max_amount: NullableFloatFieldUpdateOperationsInput
  sell_min_amount: NullableFloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConvertionPairUpdateManyWithoutCurrencyFromInput {
  connect: [ConvertionPairWhereUniqueInput!]
  connectOrCreate: [ConvertionPairCreateOrConnectWithoutCurrencyFromInput!]
  create: [ConvertionPairCreateWithoutCurrencyFromInput!]
  createMany: ConvertionPairCreateManyCurrencyFromInputEnvelope
  delete: [ConvertionPairWhereUniqueInput!]
  deleteMany: [ConvertionPairScalarWhereInput!]
  disconnect: [ConvertionPairWhereUniqueInput!]
  set: [ConvertionPairWhereUniqueInput!]
  update: [ConvertionPairUpdateWithWhereUniqueWithoutCurrencyFromInput!]
  updateMany: [ConvertionPairUpdateManyWithWhereWithoutCurrencyFromInput!]
  upsert: [ConvertionPairUpsertWithWhereUniqueWithoutCurrencyFromInput!]
}

input ConvertionPairUpdateManyWithoutCurrencyToInput {
  connect: [ConvertionPairWhereUniqueInput!]
  connectOrCreate: [ConvertionPairCreateOrConnectWithoutCurrencyToInput!]
  create: [ConvertionPairCreateWithoutCurrencyToInput!]
  createMany: ConvertionPairCreateManyCurrencyToInputEnvelope
  delete: [ConvertionPairWhereUniqueInput!]
  deleteMany: [ConvertionPairScalarWhereInput!]
  disconnect: [ConvertionPairWhereUniqueInput!]
  set: [ConvertionPairWhereUniqueInput!]
  update: [ConvertionPairUpdateWithWhereUniqueWithoutCurrencyToInput!]
  updateMany: [ConvertionPairUpdateManyWithWhereWithoutCurrencyToInput!]
  upsert: [ConvertionPairUpsertWithWhereUniqueWithoutCurrencyToInput!]
}

input ConvertionPairUpdateManyWithWhereWithoutCurrencyFromInput {
  data: ConvertionPairUpdateManyMutationInput!
  where: ConvertionPairScalarWhereInput!
}

input ConvertionPairUpdateManyWithWhereWithoutCurrencyToInput {
  data: ConvertionPairUpdateManyMutationInput!
  where: ConvertionPairScalarWhereInput!
}

input ConvertionPairUpdateOneRequiredWithoutConvertionTransactionInput {
  connect: ConvertionPairWhereUniqueInput
  connectOrCreate: ConvertionPairCreateOrConnectWithoutConvertionTransactionInput
  create: ConvertionPairCreateWithoutConvertionTransactionInput
  update: ConvertionPairUpdateWithoutConvertionTransactionInput
  upsert: ConvertionPairUpsertWithoutConvertionTransactionInput
}

input ConvertionPairUpdateWithoutConvertionTransactionInput {
  buy_fee_flat: NullableFloatFieldUpdateOperationsInput
  buy_fee_pct: NullableFloatFieldUpdateOperationsInput
  buy_max_amount: NullableFloatFieldUpdateOperationsInput
  buy_min_amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  CurrencyFrom: CurrencyUpdateOneRequiredWithoutConvertionPairFromInput
  CurrencyTo: CurrencyUpdateOneRequiredWithoutConvertionPairToInput
  id: StringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  sell_fee_flat: NullableFloatFieldUpdateOperationsInput
  sell_fee_pct: NullableFloatFieldUpdateOperationsInput
  sell_max_amount: NullableFloatFieldUpdateOperationsInput
  sell_min_amount: NullableFloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConvertionPairUpdateWithoutCurrencyFromInput {
  buy_fee_flat: NullableFloatFieldUpdateOperationsInput
  buy_fee_pct: NullableFloatFieldUpdateOperationsInput
  buy_max_amount: NullableFloatFieldUpdateOperationsInput
  buy_min_amount: NullableFloatFieldUpdateOperationsInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutConvertionPairInput
  createdAt: DateTimeFieldUpdateOperationsInput
  CurrencyTo: CurrencyUpdateOneRequiredWithoutConvertionPairToInput
  id: StringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  sell_fee_flat: NullableFloatFieldUpdateOperationsInput
  sell_fee_pct: NullableFloatFieldUpdateOperationsInput
  sell_max_amount: NullableFloatFieldUpdateOperationsInput
  sell_min_amount: NullableFloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConvertionPairUpdateWithoutCurrencyToInput {
  buy_fee_flat: NullableFloatFieldUpdateOperationsInput
  buy_fee_pct: NullableFloatFieldUpdateOperationsInput
  buy_max_amount: NullableFloatFieldUpdateOperationsInput
  buy_min_amount: NullableFloatFieldUpdateOperationsInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutConvertionPairInput
  createdAt: DateTimeFieldUpdateOperationsInput
  CurrencyFrom: CurrencyUpdateOneRequiredWithoutConvertionPairFromInput
  id: StringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  sell_fee_flat: NullableFloatFieldUpdateOperationsInput
  sell_fee_pct: NullableFloatFieldUpdateOperationsInput
  sell_max_amount: NullableFloatFieldUpdateOperationsInput
  sell_min_amount: NullableFloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConvertionPairUpdateWithWhereUniqueWithoutCurrencyFromInput {
  data: ConvertionPairUpdateWithoutCurrencyFromInput!
  where: ConvertionPairWhereUniqueInput!
}

input ConvertionPairUpdateWithWhereUniqueWithoutCurrencyToInput {
  data: ConvertionPairUpdateWithoutCurrencyToInput!
  where: ConvertionPairWhereUniqueInput!
}

input ConvertionPairUpsertWithoutConvertionTransactionInput {
  create: ConvertionPairCreateWithoutConvertionTransactionInput!
  update: ConvertionPairUpdateWithoutConvertionTransactionInput!
}

input ConvertionPairUpsertWithWhereUniqueWithoutCurrencyFromInput {
  create: ConvertionPairCreateWithoutCurrencyFromInput!
  update: ConvertionPairUpdateWithoutCurrencyFromInput!
  where: ConvertionPairWhereUniqueInput!
}

input ConvertionPairUpsertWithWhereUniqueWithoutCurrencyToInput {
  create: ConvertionPairCreateWithoutCurrencyToInput!
  update: ConvertionPairUpdateWithoutCurrencyToInput!
  where: ConvertionPairWhereUniqueInput!
}

input ConvertionPairWhereUniqueInput {
  id: String
}

type ConvertionSumaries {
  exchangeToMain: [ConvertionDetail]
  mainToExchange: [ConvertionDetail]
}

type ConvertionSumary {
  exchangeToMain: ConvertionDetail
  mainToExchange: ConvertionDetail
}

type ConvertionTransaction {
  amount: Float!
  converted_amount: Float
  createdAt: DateTime!
  fee: Float
  MainWalletFrom: MainWallet!
  MainWalletTo: MainWallet!
  price: Float!
  updatedAt: DateTime!
  user_id: String!
}

input ConvertionTransactionCreateManyConvertionPairInput {
  amount: Float!
  converted_amount: Float
  createdAt: DateTime
  direction: ConvertionDirection!
  fee: Float
  id: String
  main_wallet_id_from: String!
  main_wallet_id_to: String!
  price: Float!
  updatedAt: DateTime
  user_id: String!
}

input ConvertionTransactionCreateManyConvertionPairInputEnvelope {
  data: [ConvertionTransactionCreateManyConvertionPairInput!]
  skipDuplicates: Boolean
}

input ConvertionTransactionCreateManyMainWalletFromInput {
  amount: Float!
  converted_amount: Float
  convertion_pair_id: String!
  createdAt: DateTime
  direction: ConvertionDirection!
  fee: Float
  id: String
  main_wallet_id_to: String!
  price: Float!
  updatedAt: DateTime
  user_id: String!
}

input ConvertionTransactionCreateManyMainWalletFromInputEnvelope {
  data: [ConvertionTransactionCreateManyMainWalletFromInput!]
  skipDuplicates: Boolean
}

input ConvertionTransactionCreateManyMainWalletToInput {
  amount: Float!
  converted_amount: Float
  convertion_pair_id: String!
  createdAt: DateTime
  direction: ConvertionDirection!
  fee: Float
  id: String
  main_wallet_id_from: String!
  price: Float!
  updatedAt: DateTime
  user_id: String!
}

input ConvertionTransactionCreateManyMainWalletToInputEnvelope {
  data: [ConvertionTransactionCreateManyMainWalletToInput!]
  skipDuplicates: Boolean
}

input ConvertionTransactionCreateManyUserInput {
  amount: Float!
  converted_amount: Float
  convertion_pair_id: String!
  createdAt: DateTime
  direction: ConvertionDirection!
  fee: Float
  id: String
  main_wallet_id_from: String!
  main_wallet_id_to: String!
  price: Float!
  updatedAt: DateTime
}

input ConvertionTransactionCreateManyUserInputEnvelope {
  data: [ConvertionTransactionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input ConvertionTransactionCreateNestedManyWithoutConvertionPairInput {
  connect: [ConvertionTransactionWhereUniqueInput!]
  connectOrCreate: [ConvertionTransactionCreateOrConnectWithoutConvertionPairInput!]
  create: [ConvertionTransactionCreateWithoutConvertionPairInput!]
  createMany: ConvertionTransactionCreateManyConvertionPairInputEnvelope
}

input ConvertionTransactionCreateNestedManyWithoutMainWalletFromInput {
  connect: [ConvertionTransactionWhereUniqueInput!]
  connectOrCreate: [ConvertionTransactionCreateOrConnectWithoutMainWalletFromInput!]
  create: [ConvertionTransactionCreateWithoutMainWalletFromInput!]
  createMany: ConvertionTransactionCreateManyMainWalletFromInputEnvelope
}

input ConvertionTransactionCreateNestedManyWithoutMainWalletToInput {
  connect: [ConvertionTransactionWhereUniqueInput!]
  connectOrCreate: [ConvertionTransactionCreateOrConnectWithoutMainWalletToInput!]
  create: [ConvertionTransactionCreateWithoutMainWalletToInput!]
  createMany: ConvertionTransactionCreateManyMainWalletToInputEnvelope
}

input ConvertionTransactionCreateNestedManyWithoutUserInput {
  connect: [ConvertionTransactionWhereUniqueInput!]
  connectOrCreate: [ConvertionTransactionCreateOrConnectWithoutUserInput!]
  create: [ConvertionTransactionCreateWithoutUserInput!]
  createMany: ConvertionTransactionCreateManyUserInputEnvelope
}

input ConvertionTransactionCreateOrConnectWithoutConvertionPairInput {
  create: ConvertionTransactionCreateWithoutConvertionPairInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionCreateOrConnectWithoutMainWalletFromInput {
  create: ConvertionTransactionCreateWithoutMainWalletFromInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionCreateOrConnectWithoutMainWalletToInput {
  create: ConvertionTransactionCreateWithoutMainWalletToInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionCreateOrConnectWithoutUserInput {
  create: ConvertionTransactionCreateWithoutUserInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionCreateWithoutConvertionPairInput {
  amount: Float!
  converted_amount: Float
  createdAt: DateTime
  direction: ConvertionDirection!
  fee: Float
  id: String
  MainWalletFrom: MainWalletCreateNestedOneWithoutConvertionTransactionFromInput!
  MainWalletTo: MainWalletCreateNestedOneWithoutConvertionTransactionToInput!
  price: Float!
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutConvertionTransactionInput!
}

input ConvertionTransactionCreateWithoutMainWalletFromInput {
  amount: Float!
  converted_amount: Float
  ConvertionPair: ConvertionPairCreateNestedOneWithoutConvertionTransactionInput!
  createdAt: DateTime
  direction: ConvertionDirection!
  fee: Float
  id: String
  MainWalletTo: MainWalletCreateNestedOneWithoutConvertionTransactionToInput!
  price: Float!
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutConvertionTransactionInput!
}

input ConvertionTransactionCreateWithoutMainWalletToInput {
  amount: Float!
  converted_amount: Float
  ConvertionPair: ConvertionPairCreateNestedOneWithoutConvertionTransactionInput!
  createdAt: DateTime
  direction: ConvertionDirection!
  fee: Float
  id: String
  MainWalletFrom: MainWalletCreateNestedOneWithoutConvertionTransactionFromInput!
  price: Float!
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutConvertionTransactionInput!
}

input ConvertionTransactionCreateWithoutUserInput {
  amount: Float!
  converted_amount: Float
  ConvertionPair: ConvertionPairCreateNestedOneWithoutConvertionTransactionInput!
  createdAt: DateTime
  direction: ConvertionDirection!
  fee: Float
  id: String
  MainWalletFrom: MainWalletCreateNestedOneWithoutConvertionTransactionFromInput!
  MainWalletTo: MainWalletCreateNestedOneWithoutConvertionTransactionToInput!
  price: Float!
  updatedAt: DateTime
}

input ConvertionTransactionScalarWhereInput {
  amount: FloatFilter
  AND: [ConvertionTransactionScalarWhereInput!]
  converted_amount: FloatNullableFilter
  convertion_pair_id: StringFilter
  createdAt: DateTimeFilter
  direction: EnumConvertionDirectionFilter
  fee: FloatNullableFilter
  id: StringFilter
  main_wallet_id_from: StringFilter
  main_wallet_id_to: StringFilter
  NOT: [ConvertionTransactionScalarWhereInput!]
  OR: [ConvertionTransactionScalarWhereInput!]
  price: FloatFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

input ConvertionTransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  converted_amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  direction: EnumConvertionDirectionFieldUpdateOperationsInput
  fee: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConvertionTransactionUpdateManyWithoutConvertionPairInput {
  connect: [ConvertionTransactionWhereUniqueInput!]
  connectOrCreate: [ConvertionTransactionCreateOrConnectWithoutConvertionPairInput!]
  create: [ConvertionTransactionCreateWithoutConvertionPairInput!]
  createMany: ConvertionTransactionCreateManyConvertionPairInputEnvelope
  delete: [ConvertionTransactionWhereUniqueInput!]
  deleteMany: [ConvertionTransactionScalarWhereInput!]
  disconnect: [ConvertionTransactionWhereUniqueInput!]
  set: [ConvertionTransactionWhereUniqueInput!]
  update: [ConvertionTransactionUpdateWithWhereUniqueWithoutConvertionPairInput!]
  updateMany: [ConvertionTransactionUpdateManyWithWhereWithoutConvertionPairInput!]
  upsert: [ConvertionTransactionUpsertWithWhereUniqueWithoutConvertionPairInput!]
}

input ConvertionTransactionUpdateManyWithoutMainWalletFromInput {
  connect: [ConvertionTransactionWhereUniqueInput!]
  connectOrCreate: [ConvertionTransactionCreateOrConnectWithoutMainWalletFromInput!]
  create: [ConvertionTransactionCreateWithoutMainWalletFromInput!]
  createMany: ConvertionTransactionCreateManyMainWalletFromInputEnvelope
  delete: [ConvertionTransactionWhereUniqueInput!]
  deleteMany: [ConvertionTransactionScalarWhereInput!]
  disconnect: [ConvertionTransactionWhereUniqueInput!]
  set: [ConvertionTransactionWhereUniqueInput!]
  update: [ConvertionTransactionUpdateWithWhereUniqueWithoutMainWalletFromInput!]
  updateMany: [ConvertionTransactionUpdateManyWithWhereWithoutMainWalletFromInput!]
  upsert: [ConvertionTransactionUpsertWithWhereUniqueWithoutMainWalletFromInput!]
}

input ConvertionTransactionUpdateManyWithoutMainWalletToInput {
  connect: [ConvertionTransactionWhereUniqueInput!]
  connectOrCreate: [ConvertionTransactionCreateOrConnectWithoutMainWalletToInput!]
  create: [ConvertionTransactionCreateWithoutMainWalletToInput!]
  createMany: ConvertionTransactionCreateManyMainWalletToInputEnvelope
  delete: [ConvertionTransactionWhereUniqueInput!]
  deleteMany: [ConvertionTransactionScalarWhereInput!]
  disconnect: [ConvertionTransactionWhereUniqueInput!]
  set: [ConvertionTransactionWhereUniqueInput!]
  update: [ConvertionTransactionUpdateWithWhereUniqueWithoutMainWalletToInput!]
  updateMany: [ConvertionTransactionUpdateManyWithWhereWithoutMainWalletToInput!]
  upsert: [ConvertionTransactionUpsertWithWhereUniqueWithoutMainWalletToInput!]
}

input ConvertionTransactionUpdateManyWithoutUserInput {
  connect: [ConvertionTransactionWhereUniqueInput!]
  connectOrCreate: [ConvertionTransactionCreateOrConnectWithoutUserInput!]
  create: [ConvertionTransactionCreateWithoutUserInput!]
  createMany: ConvertionTransactionCreateManyUserInputEnvelope
  delete: [ConvertionTransactionWhereUniqueInput!]
  deleteMany: [ConvertionTransactionScalarWhereInput!]
  disconnect: [ConvertionTransactionWhereUniqueInput!]
  set: [ConvertionTransactionWhereUniqueInput!]
  update: [ConvertionTransactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ConvertionTransactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [ConvertionTransactionUpsertWithWhereUniqueWithoutUserInput!]
}

input ConvertionTransactionUpdateManyWithWhereWithoutConvertionPairInput {
  data: ConvertionTransactionUpdateManyMutationInput!
  where: ConvertionTransactionScalarWhereInput!
}

input ConvertionTransactionUpdateManyWithWhereWithoutMainWalletFromInput {
  data: ConvertionTransactionUpdateManyMutationInput!
  where: ConvertionTransactionScalarWhereInput!
}

input ConvertionTransactionUpdateManyWithWhereWithoutMainWalletToInput {
  data: ConvertionTransactionUpdateManyMutationInput!
  where: ConvertionTransactionScalarWhereInput!
}

input ConvertionTransactionUpdateManyWithWhereWithoutUserInput {
  data: ConvertionTransactionUpdateManyMutationInput!
  where: ConvertionTransactionScalarWhereInput!
}

input ConvertionTransactionUpdateWithoutConvertionPairInput {
  amount: FloatFieldUpdateOperationsInput
  converted_amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  direction: EnumConvertionDirectionFieldUpdateOperationsInput
  fee: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  MainWalletFrom: MainWalletUpdateOneRequiredWithoutConvertionTransactionFromInput
  MainWalletTo: MainWalletUpdateOneRequiredWithoutConvertionTransactionToInput
  price: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutConvertionTransactionInput
}

input ConvertionTransactionUpdateWithoutMainWalletFromInput {
  amount: FloatFieldUpdateOperationsInput
  converted_amount: NullableFloatFieldUpdateOperationsInput
  ConvertionPair: ConvertionPairUpdateOneRequiredWithoutConvertionTransactionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  direction: EnumConvertionDirectionFieldUpdateOperationsInput
  fee: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  MainWalletTo: MainWalletUpdateOneRequiredWithoutConvertionTransactionToInput
  price: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutConvertionTransactionInput
}

input ConvertionTransactionUpdateWithoutMainWalletToInput {
  amount: FloatFieldUpdateOperationsInput
  converted_amount: NullableFloatFieldUpdateOperationsInput
  ConvertionPair: ConvertionPairUpdateOneRequiredWithoutConvertionTransactionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  direction: EnumConvertionDirectionFieldUpdateOperationsInput
  fee: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  MainWalletFrom: MainWalletUpdateOneRequiredWithoutConvertionTransactionFromInput
  price: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutConvertionTransactionInput
}

input ConvertionTransactionUpdateWithoutUserInput {
  amount: FloatFieldUpdateOperationsInput
  converted_amount: NullableFloatFieldUpdateOperationsInput
  ConvertionPair: ConvertionPairUpdateOneRequiredWithoutConvertionTransactionInput
  createdAt: DateTimeFieldUpdateOperationsInput
  direction: EnumConvertionDirectionFieldUpdateOperationsInput
  fee: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  MainWalletFrom: MainWalletUpdateOneRequiredWithoutConvertionTransactionFromInput
  MainWalletTo: MainWalletUpdateOneRequiredWithoutConvertionTransactionToInput
  price: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ConvertionTransactionUpdateWithWhereUniqueWithoutConvertionPairInput {
  data: ConvertionTransactionUpdateWithoutConvertionPairInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionUpdateWithWhereUniqueWithoutMainWalletFromInput {
  data: ConvertionTransactionUpdateWithoutMainWalletFromInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionUpdateWithWhereUniqueWithoutMainWalletToInput {
  data: ConvertionTransactionUpdateWithoutMainWalletToInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionUpdateWithWhereUniqueWithoutUserInput {
  data: ConvertionTransactionUpdateWithoutUserInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionUpsertWithWhereUniqueWithoutConvertionPairInput {
  create: ConvertionTransactionCreateWithoutConvertionPairInput!
  update: ConvertionTransactionUpdateWithoutConvertionPairInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionUpsertWithWhereUniqueWithoutMainWalletFromInput {
  create: ConvertionTransactionCreateWithoutMainWalletFromInput!
  update: ConvertionTransactionUpdateWithoutMainWalletFromInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionUpsertWithWhereUniqueWithoutMainWalletToInput {
  create: ConvertionTransactionCreateWithoutMainWalletToInput!
  update: ConvertionTransactionUpdateWithoutMainWalletToInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionUpsertWithWhereUniqueWithoutUserInput {
  create: ConvertionTransactionCreateWithoutUserInput!
  update: ConvertionTransactionUpdateWithoutUserInput!
  where: ConvertionTransactionWhereUniqueInput!
}

input ConvertionTransactionWhereUniqueInput {
  id: String
}

type Country {
  code: String!
  id: String!
  name: String!
}

input CountryCreateNestedOneWithoutUsersInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutUsersInput
  create: CountryCreateWithoutUsersInput
}

input CountryCreateOrConnectWithoutUsersInput {
  create: CountryCreateWithoutUsersInput!
  where: CountryWhereUniqueInput!
}

input CountryCreateWithoutUsersInput {
  code: String!
  createdAt: DateTime
  flag: String!
  id: String
  name: String!
  updatedAt: DateTime
}

input CountryUpdateOneWithoutUsersInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutUsersInput
  create: CountryCreateWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  update: CountryUpdateWithoutUsersInput
  upsert: CountryUpsertWithoutUsersInput
}

input CountryUpdateWithoutUsersInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  flag: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CountryUpsertWithoutUsersInput {
  create: CountryCreateWithoutUsersInput!
  update: CountryUpdateWithoutUsersInput!
}

input CountryWhereUniqueInput {
  id: String
}

enum Crypto_Service {
  BANK
  BITCOIN
  BSC
  ETHEREUM
  POLYGON
  TRON
}

type Currency {
  crypto_data: Json
  disclaimer_deposit: String
  disclaimer_withdraw: String
  icon: String
  id: String!
  instruction_deposit: String
  instruction_withdraw: String
  is_enable: Boolean!
  is_enable_deposit: Boolean!
  is_enable_withdraw: Boolean!
  is_enable_withdraw_cron: Boolean!
  max_daily_withdraw: Float
  max_daily_withdraw_verified: Float
  max_withdraw: Float
  min_withdraw: Float
  name: String!
  regex: String
  required_confirmation: Int!
  symbol: String!
  withdraw_fee_flat: Float
  withdraw_fee_pct: Float
  withdraw_manual_threshold: Float
}

type CurrencyConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CurrencyEdge]

  """Flattened list of Currency type"""
  nodes: [Currency]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type CurrencyConnectionPayload {
  nodes: [Currency]
  total: Int
}

input CurrencyCreateNestedOneWithoutConvertionPairFromInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutConvertionPairFromInput
  create: CurrencyCreateWithoutConvertionPairFromInput
}

input CurrencyCreateNestedOneWithoutConvertionPairToInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutConvertionPairToInput
  create: CurrencyCreateWithoutConvertionPairToInput
}

input CurrencyCreateNestedOneWithoutMainWalletInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutMainWalletInput
  create: CurrencyCreateWithoutMainWalletInput
}

input CurrencyCreateNestedOneWithoutMainWalletTransactionInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutMainWalletTransactionInput
  create: CurrencyCreateWithoutMainWalletTransactionInput
}

input CurrencyCreateNestedOneWithoutTransactionMasterInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutTransactionMasterInput
  create: CurrencyCreateWithoutTransactionMasterInput
}

input CurrencyCreateOrConnectWithoutConvertionPairFromInput {
  create: CurrencyCreateWithoutConvertionPairFromInput!
  where: CurrencyWhereUniqueInput!
}

input CurrencyCreateOrConnectWithoutConvertionPairToInput {
  create: CurrencyCreateWithoutConvertionPairToInput!
  where: CurrencyWhereUniqueInput!
}

input CurrencyCreateOrConnectWithoutMainWalletInput {
  create: CurrencyCreateWithoutMainWalletInput!
  where: CurrencyWhereUniqueInput!
}

input CurrencyCreateOrConnectWithoutMainWalletTransactionInput {
  create: CurrencyCreateWithoutMainWalletTransactionInput!
  where: CurrencyWhereUniqueInput!
}

input CurrencyCreateOrConnectWithoutTransactionMasterInput {
  create: CurrencyCreateWithoutTransactionMasterInput!
  where: CurrencyWhereUniqueInput!
}

input CurrencyCreateWithoutConvertionPairFromInput {
  admin_config_price: Float
  admin_config_price_price_step: Float
  admin_config_price_volume_step: Float
  admin_config_total_volume: Float
  admin_config_volume_cache_time: DateTime
  ConvertionPairTo: ConvertionPairCreateNestedManyWithoutCurrencyToInput
  createdAt: DateTime
  crypto_data: NullableJsonNullValueInput
  crypto_service: Crypto_Service
  disclaimer_deposit: String
  disclaimer_withdraw: String
  icon: String
  id: String
  instruction_deposit: String
  instruction_withdraw: String
  is_enable: Boolean
  is_enable_convert: Boolean
  is_enable_convert_from: Boolean
  is_enable_convert_to: Boolean
  is_enable_deposit: Boolean
  is_enable_withdraw: Boolean
  is_enable_withdraw_cron: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutCurrencyInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutCurrencyInput
  MasterWallet: MasterWalletCreateNestedManyWithoutCurrencyInput
  max_daily_withdraw: Float
  max_daily_withdraw_verified: Float
  max_withdraw: Float
  min_withdraw: Float
  name: String!
  regex: String
  required_confirmation: Int
  symbol: String!
  TransactionMaster: TransactionMasterCreateNestedManyWithoutCurrencyInput
  updatedAt: DateTime
  withdraw_fee_flat: Float
  withdraw_fee_pct: Float
  withdraw_manual_threshold: Float
}

input CurrencyCreateWithoutConvertionPairToInput {
  admin_config_price: Float
  admin_config_price_price_step: Float
  admin_config_price_volume_step: Float
  admin_config_total_volume: Float
  admin_config_volume_cache_time: DateTime
  ConvertionPairFrom: ConvertionPairCreateNestedManyWithoutCurrencyFromInput
  createdAt: DateTime
  crypto_data: NullableJsonNullValueInput
  crypto_service: Crypto_Service
  disclaimer_deposit: String
  disclaimer_withdraw: String
  icon: String
  id: String
  instruction_deposit: String
  instruction_withdraw: String
  is_enable: Boolean
  is_enable_convert: Boolean
  is_enable_convert_from: Boolean
  is_enable_convert_to: Boolean
  is_enable_deposit: Boolean
  is_enable_withdraw: Boolean
  is_enable_withdraw_cron: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutCurrencyInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutCurrencyInput
  MasterWallet: MasterWalletCreateNestedManyWithoutCurrencyInput
  max_daily_withdraw: Float
  max_daily_withdraw_verified: Float
  max_withdraw: Float
  min_withdraw: Float
  name: String!
  regex: String
  required_confirmation: Int
  symbol: String!
  TransactionMaster: TransactionMasterCreateNestedManyWithoutCurrencyInput
  updatedAt: DateTime
  withdraw_fee_flat: Float
  withdraw_fee_pct: Float
  withdraw_manual_threshold: Float
}

input CurrencyCreateWithoutMainWalletInput {
  admin_config_price: Float
  admin_config_price_price_step: Float
  admin_config_price_volume_step: Float
  admin_config_total_volume: Float
  admin_config_volume_cache_time: DateTime
  ConvertionPairFrom: ConvertionPairCreateNestedManyWithoutCurrencyFromInput
  ConvertionPairTo: ConvertionPairCreateNestedManyWithoutCurrencyToInput
  createdAt: DateTime
  crypto_data: NullableJsonNullValueInput
  crypto_service: Crypto_Service
  disclaimer_deposit: String
  disclaimer_withdraw: String
  icon: String
  id: String
  instruction_deposit: String
  instruction_withdraw: String
  is_enable: Boolean
  is_enable_convert: Boolean
  is_enable_convert_from: Boolean
  is_enable_convert_to: Boolean
  is_enable_deposit: Boolean
  is_enable_withdraw: Boolean
  is_enable_withdraw_cron: Boolean
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutCurrencyInput
  MasterWallet: MasterWalletCreateNestedManyWithoutCurrencyInput
  max_daily_withdraw: Float
  max_daily_withdraw_verified: Float
  max_withdraw: Float
  min_withdraw: Float
  name: String!
  regex: String
  required_confirmation: Int
  symbol: String!
  TransactionMaster: TransactionMasterCreateNestedManyWithoutCurrencyInput
  updatedAt: DateTime
  withdraw_fee_flat: Float
  withdraw_fee_pct: Float
  withdraw_manual_threshold: Float
}

input CurrencyCreateWithoutMainWalletTransactionInput {
  admin_config_price: Float
  admin_config_price_price_step: Float
  admin_config_price_volume_step: Float
  admin_config_total_volume: Float
  admin_config_volume_cache_time: DateTime
  ConvertionPairFrom: ConvertionPairCreateNestedManyWithoutCurrencyFromInput
  ConvertionPairTo: ConvertionPairCreateNestedManyWithoutCurrencyToInput
  createdAt: DateTime
  crypto_data: NullableJsonNullValueInput
  crypto_service: Crypto_Service
  disclaimer_deposit: String
  disclaimer_withdraw: String
  icon: String
  id: String
  instruction_deposit: String
  instruction_withdraw: String
  is_enable: Boolean
  is_enable_convert: Boolean
  is_enable_convert_from: Boolean
  is_enable_convert_to: Boolean
  is_enable_deposit: Boolean
  is_enable_withdraw: Boolean
  is_enable_withdraw_cron: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutCurrencyInput
  MasterWallet: MasterWalletCreateNestedManyWithoutCurrencyInput
  max_daily_withdraw: Float
  max_daily_withdraw_verified: Float
  max_withdraw: Float
  min_withdraw: Float
  name: String!
  regex: String
  required_confirmation: Int
  symbol: String!
  TransactionMaster: TransactionMasterCreateNestedManyWithoutCurrencyInput
  updatedAt: DateTime
  withdraw_fee_flat: Float
  withdraw_fee_pct: Float
  withdraw_manual_threshold: Float
}

input CurrencyCreateWithoutTransactionMasterInput {
  admin_config_price: Float
  admin_config_price_price_step: Float
  admin_config_price_volume_step: Float
  admin_config_total_volume: Float
  admin_config_volume_cache_time: DateTime
  ConvertionPairFrom: ConvertionPairCreateNestedManyWithoutCurrencyFromInput
  ConvertionPairTo: ConvertionPairCreateNestedManyWithoutCurrencyToInput
  createdAt: DateTime
  crypto_data: NullableJsonNullValueInput
  crypto_service: Crypto_Service
  disclaimer_deposit: String
  disclaimer_withdraw: String
  icon: String
  id: String
  instruction_deposit: String
  instruction_withdraw: String
  is_enable: Boolean
  is_enable_convert: Boolean
  is_enable_convert_from: Boolean
  is_enable_convert_to: Boolean
  is_enable_deposit: Boolean
  is_enable_withdraw: Boolean
  is_enable_withdraw_cron: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutCurrencyInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutCurrencyInput
  MasterWallet: MasterWalletCreateNestedManyWithoutCurrencyInput
  max_daily_withdraw: Float
  max_daily_withdraw_verified: Float
  max_withdraw: Float
  min_withdraw: Float
  name: String!
  regex: String
  required_confirmation: Int
  symbol: String!
  updatedAt: DateTime
  withdraw_fee_flat: Float
  withdraw_fee_pct: Float
  withdraw_manual_threshold: Float
}

type CurrencyEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Currency
}

input CurrencyUpdateInput {
  admin_config_price: NullableFloatFieldUpdateOperationsInput
  admin_config_price_price_step: NullableFloatFieldUpdateOperationsInput
  admin_config_price_volume_step: NullableFloatFieldUpdateOperationsInput
  admin_config_total_volume: NullableFloatFieldUpdateOperationsInput
  admin_config_volume_cache_time: NullableDateTimeFieldUpdateOperationsInput
  ConvertionPairFrom: ConvertionPairUpdateManyWithoutCurrencyFromInput
  ConvertionPairTo: ConvertionPairUpdateManyWithoutCurrencyToInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crypto_data: NullableJsonNullValueInput
  crypto_service: NullableEnumCrypto_ServiceFieldUpdateOperationsInput
  disclaimer_deposit: NullableStringFieldUpdateOperationsInput
  disclaimer_withdraw: NullableStringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  instruction_deposit: NullableStringFieldUpdateOperationsInput
  instruction_withdraw: NullableStringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  is_enable_convert: BoolFieldUpdateOperationsInput
  is_enable_convert_from: BoolFieldUpdateOperationsInput
  is_enable_convert_to: BoolFieldUpdateOperationsInput
  is_enable_deposit: BoolFieldUpdateOperationsInput
  is_enable_withdraw: BoolFieldUpdateOperationsInput
  is_enable_withdraw_cron: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutCurrencyInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutCurrencyInput
  MasterWallet: MasterWalletUpdateManyWithoutCurrencyInput
  max_daily_withdraw: NullableFloatFieldUpdateOperationsInput
  max_daily_withdraw_verified: NullableFloatFieldUpdateOperationsInput
  max_withdraw: NullableFloatFieldUpdateOperationsInput
  min_withdraw: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regex: NullableStringFieldUpdateOperationsInput
  required_confirmation: IntFieldUpdateOperationsInput
  symbol: StringFieldUpdateOperationsInput
  TransactionMaster: TransactionMasterUpdateManyWithoutCurrencyInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  withdraw_fee_flat: NullableFloatFieldUpdateOperationsInput
  withdraw_fee_pct: NullableFloatFieldUpdateOperationsInput
  withdraw_manual_threshold: NullableFloatFieldUpdateOperationsInput
}

input CurrencyUpdateOneRequiredWithoutConvertionPairFromInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutConvertionPairFromInput
  create: CurrencyCreateWithoutConvertionPairFromInput
  update: CurrencyUpdateWithoutConvertionPairFromInput
  upsert: CurrencyUpsertWithoutConvertionPairFromInput
}

input CurrencyUpdateOneRequiredWithoutConvertionPairToInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutConvertionPairToInput
  create: CurrencyCreateWithoutConvertionPairToInput
  update: CurrencyUpdateWithoutConvertionPairToInput
  upsert: CurrencyUpsertWithoutConvertionPairToInput
}

input CurrencyUpdateOneRequiredWithoutMainWalletInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutMainWalletInput
  create: CurrencyCreateWithoutMainWalletInput
  update: CurrencyUpdateWithoutMainWalletInput
  upsert: CurrencyUpsertWithoutMainWalletInput
}

input CurrencyUpdateOneRequiredWithoutMainWalletTransactionInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutMainWalletTransactionInput
  create: CurrencyCreateWithoutMainWalletTransactionInput
  update: CurrencyUpdateWithoutMainWalletTransactionInput
  upsert: CurrencyUpsertWithoutMainWalletTransactionInput
}

input CurrencyUpdateOneRequiredWithoutTransactionMasterInput {
  connect: CurrencyWhereUniqueInput
  connectOrCreate: CurrencyCreateOrConnectWithoutTransactionMasterInput
  create: CurrencyCreateWithoutTransactionMasterInput
  update: CurrencyUpdateWithoutTransactionMasterInput
  upsert: CurrencyUpsertWithoutTransactionMasterInput
}

input CurrencyUpdateWithoutConvertionPairFromInput {
  admin_config_price: NullableFloatFieldUpdateOperationsInput
  admin_config_price_price_step: NullableFloatFieldUpdateOperationsInput
  admin_config_price_volume_step: NullableFloatFieldUpdateOperationsInput
  admin_config_total_volume: NullableFloatFieldUpdateOperationsInput
  admin_config_volume_cache_time: NullableDateTimeFieldUpdateOperationsInput
  ConvertionPairTo: ConvertionPairUpdateManyWithoutCurrencyToInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crypto_data: NullableJsonNullValueInput
  crypto_service: NullableEnumCrypto_ServiceFieldUpdateOperationsInput
  disclaimer_deposit: NullableStringFieldUpdateOperationsInput
  disclaimer_withdraw: NullableStringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  instruction_deposit: NullableStringFieldUpdateOperationsInput
  instruction_withdraw: NullableStringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  is_enable_convert: BoolFieldUpdateOperationsInput
  is_enable_convert_from: BoolFieldUpdateOperationsInput
  is_enable_convert_to: BoolFieldUpdateOperationsInput
  is_enable_deposit: BoolFieldUpdateOperationsInput
  is_enable_withdraw: BoolFieldUpdateOperationsInput
  is_enable_withdraw_cron: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutCurrencyInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutCurrencyInput
  MasterWallet: MasterWalletUpdateManyWithoutCurrencyInput
  max_daily_withdraw: NullableFloatFieldUpdateOperationsInput
  max_daily_withdraw_verified: NullableFloatFieldUpdateOperationsInput
  max_withdraw: NullableFloatFieldUpdateOperationsInput
  min_withdraw: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regex: NullableStringFieldUpdateOperationsInput
  required_confirmation: IntFieldUpdateOperationsInput
  symbol: StringFieldUpdateOperationsInput
  TransactionMaster: TransactionMasterUpdateManyWithoutCurrencyInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  withdraw_fee_flat: NullableFloatFieldUpdateOperationsInput
  withdraw_fee_pct: NullableFloatFieldUpdateOperationsInput
  withdraw_manual_threshold: NullableFloatFieldUpdateOperationsInput
}

input CurrencyUpdateWithoutConvertionPairToInput {
  admin_config_price: NullableFloatFieldUpdateOperationsInput
  admin_config_price_price_step: NullableFloatFieldUpdateOperationsInput
  admin_config_price_volume_step: NullableFloatFieldUpdateOperationsInput
  admin_config_total_volume: NullableFloatFieldUpdateOperationsInput
  admin_config_volume_cache_time: NullableDateTimeFieldUpdateOperationsInput
  ConvertionPairFrom: ConvertionPairUpdateManyWithoutCurrencyFromInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crypto_data: NullableJsonNullValueInput
  crypto_service: NullableEnumCrypto_ServiceFieldUpdateOperationsInput
  disclaimer_deposit: NullableStringFieldUpdateOperationsInput
  disclaimer_withdraw: NullableStringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  instruction_deposit: NullableStringFieldUpdateOperationsInput
  instruction_withdraw: NullableStringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  is_enable_convert: BoolFieldUpdateOperationsInput
  is_enable_convert_from: BoolFieldUpdateOperationsInput
  is_enable_convert_to: BoolFieldUpdateOperationsInput
  is_enable_deposit: BoolFieldUpdateOperationsInput
  is_enable_withdraw: BoolFieldUpdateOperationsInput
  is_enable_withdraw_cron: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutCurrencyInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutCurrencyInput
  MasterWallet: MasterWalletUpdateManyWithoutCurrencyInput
  max_daily_withdraw: NullableFloatFieldUpdateOperationsInput
  max_daily_withdraw_verified: NullableFloatFieldUpdateOperationsInput
  max_withdraw: NullableFloatFieldUpdateOperationsInput
  min_withdraw: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regex: NullableStringFieldUpdateOperationsInput
  required_confirmation: IntFieldUpdateOperationsInput
  symbol: StringFieldUpdateOperationsInput
  TransactionMaster: TransactionMasterUpdateManyWithoutCurrencyInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  withdraw_fee_flat: NullableFloatFieldUpdateOperationsInput
  withdraw_fee_pct: NullableFloatFieldUpdateOperationsInput
  withdraw_manual_threshold: NullableFloatFieldUpdateOperationsInput
}

input CurrencyUpdateWithoutMainWalletInput {
  admin_config_price: NullableFloatFieldUpdateOperationsInput
  admin_config_price_price_step: NullableFloatFieldUpdateOperationsInput
  admin_config_price_volume_step: NullableFloatFieldUpdateOperationsInput
  admin_config_total_volume: NullableFloatFieldUpdateOperationsInput
  admin_config_volume_cache_time: NullableDateTimeFieldUpdateOperationsInput
  ConvertionPairFrom: ConvertionPairUpdateManyWithoutCurrencyFromInput
  ConvertionPairTo: ConvertionPairUpdateManyWithoutCurrencyToInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crypto_data: NullableJsonNullValueInput
  crypto_service: NullableEnumCrypto_ServiceFieldUpdateOperationsInput
  disclaimer_deposit: NullableStringFieldUpdateOperationsInput
  disclaimer_withdraw: NullableStringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  instruction_deposit: NullableStringFieldUpdateOperationsInput
  instruction_withdraw: NullableStringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  is_enable_convert: BoolFieldUpdateOperationsInput
  is_enable_convert_from: BoolFieldUpdateOperationsInput
  is_enable_convert_to: BoolFieldUpdateOperationsInput
  is_enable_deposit: BoolFieldUpdateOperationsInput
  is_enable_withdraw: BoolFieldUpdateOperationsInput
  is_enable_withdraw_cron: BoolFieldUpdateOperationsInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutCurrencyInput
  MasterWallet: MasterWalletUpdateManyWithoutCurrencyInput
  max_daily_withdraw: NullableFloatFieldUpdateOperationsInput
  max_daily_withdraw_verified: NullableFloatFieldUpdateOperationsInput
  max_withdraw: NullableFloatFieldUpdateOperationsInput
  min_withdraw: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regex: NullableStringFieldUpdateOperationsInput
  required_confirmation: IntFieldUpdateOperationsInput
  symbol: StringFieldUpdateOperationsInput
  TransactionMaster: TransactionMasterUpdateManyWithoutCurrencyInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  withdraw_fee_flat: NullableFloatFieldUpdateOperationsInput
  withdraw_fee_pct: NullableFloatFieldUpdateOperationsInput
  withdraw_manual_threshold: NullableFloatFieldUpdateOperationsInput
}

input CurrencyUpdateWithoutMainWalletTransactionInput {
  admin_config_price: NullableFloatFieldUpdateOperationsInput
  admin_config_price_price_step: NullableFloatFieldUpdateOperationsInput
  admin_config_price_volume_step: NullableFloatFieldUpdateOperationsInput
  admin_config_total_volume: NullableFloatFieldUpdateOperationsInput
  admin_config_volume_cache_time: NullableDateTimeFieldUpdateOperationsInput
  ConvertionPairFrom: ConvertionPairUpdateManyWithoutCurrencyFromInput
  ConvertionPairTo: ConvertionPairUpdateManyWithoutCurrencyToInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crypto_data: NullableJsonNullValueInput
  crypto_service: NullableEnumCrypto_ServiceFieldUpdateOperationsInput
  disclaimer_deposit: NullableStringFieldUpdateOperationsInput
  disclaimer_withdraw: NullableStringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  instruction_deposit: NullableStringFieldUpdateOperationsInput
  instruction_withdraw: NullableStringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  is_enable_convert: BoolFieldUpdateOperationsInput
  is_enable_convert_from: BoolFieldUpdateOperationsInput
  is_enable_convert_to: BoolFieldUpdateOperationsInput
  is_enable_deposit: BoolFieldUpdateOperationsInput
  is_enable_withdraw: BoolFieldUpdateOperationsInput
  is_enable_withdraw_cron: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutCurrencyInput
  MasterWallet: MasterWalletUpdateManyWithoutCurrencyInput
  max_daily_withdraw: NullableFloatFieldUpdateOperationsInput
  max_daily_withdraw_verified: NullableFloatFieldUpdateOperationsInput
  max_withdraw: NullableFloatFieldUpdateOperationsInput
  min_withdraw: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regex: NullableStringFieldUpdateOperationsInput
  required_confirmation: IntFieldUpdateOperationsInput
  symbol: StringFieldUpdateOperationsInput
  TransactionMaster: TransactionMasterUpdateManyWithoutCurrencyInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  withdraw_fee_flat: NullableFloatFieldUpdateOperationsInput
  withdraw_fee_pct: NullableFloatFieldUpdateOperationsInput
  withdraw_manual_threshold: NullableFloatFieldUpdateOperationsInput
}

input CurrencyUpdateWithoutTransactionMasterInput {
  admin_config_price: NullableFloatFieldUpdateOperationsInput
  admin_config_price_price_step: NullableFloatFieldUpdateOperationsInput
  admin_config_price_volume_step: NullableFloatFieldUpdateOperationsInput
  admin_config_total_volume: NullableFloatFieldUpdateOperationsInput
  admin_config_volume_cache_time: NullableDateTimeFieldUpdateOperationsInput
  ConvertionPairFrom: ConvertionPairUpdateManyWithoutCurrencyFromInput
  ConvertionPairTo: ConvertionPairUpdateManyWithoutCurrencyToInput
  createdAt: DateTimeFieldUpdateOperationsInput
  crypto_data: NullableJsonNullValueInput
  crypto_service: NullableEnumCrypto_ServiceFieldUpdateOperationsInput
  disclaimer_deposit: NullableStringFieldUpdateOperationsInput
  disclaimer_withdraw: NullableStringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  instruction_deposit: NullableStringFieldUpdateOperationsInput
  instruction_withdraw: NullableStringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  is_enable_convert: BoolFieldUpdateOperationsInput
  is_enable_convert_from: BoolFieldUpdateOperationsInput
  is_enable_convert_to: BoolFieldUpdateOperationsInput
  is_enable_deposit: BoolFieldUpdateOperationsInput
  is_enable_withdraw: BoolFieldUpdateOperationsInput
  is_enable_withdraw_cron: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutCurrencyInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutCurrencyInput
  MasterWallet: MasterWalletUpdateManyWithoutCurrencyInput
  max_daily_withdraw: NullableFloatFieldUpdateOperationsInput
  max_daily_withdraw_verified: NullableFloatFieldUpdateOperationsInput
  max_withdraw: NullableFloatFieldUpdateOperationsInput
  min_withdraw: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  regex: NullableStringFieldUpdateOperationsInput
  required_confirmation: IntFieldUpdateOperationsInput
  symbol: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  withdraw_fee_flat: NullableFloatFieldUpdateOperationsInput
  withdraw_fee_pct: NullableFloatFieldUpdateOperationsInput
  withdraw_manual_threshold: NullableFloatFieldUpdateOperationsInput
}

input CurrencyUpsertWithoutConvertionPairFromInput {
  create: CurrencyCreateWithoutConvertionPairFromInput!
  update: CurrencyUpdateWithoutConvertionPairFromInput!
}

input CurrencyUpsertWithoutConvertionPairToInput {
  create: CurrencyCreateWithoutConvertionPairToInput!
  update: CurrencyUpdateWithoutConvertionPairToInput!
}

input CurrencyUpsertWithoutMainWalletInput {
  create: CurrencyCreateWithoutMainWalletInput!
  update: CurrencyUpdateWithoutMainWalletInput!
}

input CurrencyUpsertWithoutMainWalletTransactionInput {
  create: CurrencyCreateWithoutMainWalletTransactionInput!
  update: CurrencyUpdateWithoutMainWalletTransactionInput!
}

input CurrencyUpsertWithoutTransactionMasterInput {
  create: CurrencyCreateWithoutTransactionMasterInput!
  update: CurrencyUpdateWithoutTransactionMasterInput!
}

input CurrencyWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

enum DestinationType {
  EXCHANGE_WALLET
  MAIN_WALLET
}

type Device {
  createdAt: DateTime!
  enable: Boolean!
  id: String!
  model: String
  platform: Platform!
  token: String!
  updatedAt: DateTime!
  User: User!
  user_id: String!
  version: String
}

input DeviceCreateManyUserInput {
  createdAt: DateTime
  enable: Boolean!
  id: String
  model: String
  platform: Platform!
  token: String!
  updatedAt: DateTime
  version: String
}

input DeviceCreateManyUserInputEnvelope {
  data: [DeviceCreateManyUserInput!]
  skipDuplicates: Boolean
}

input DeviceCreateNestedManyWithoutUserInput {
  connect: [DeviceWhereUniqueInput!]
  connectOrCreate: [DeviceCreateOrConnectWithoutUserInput!]
  create: [DeviceCreateWithoutUserInput!]
  createMany: DeviceCreateManyUserInputEnvelope
}

input DeviceCreateOrConnectWithoutUserInput {
  create: DeviceCreateWithoutUserInput!
  where: DeviceWhereUniqueInput!
}

input DeviceCreateWithoutUserInput {
  createdAt: DateTime
  enable: Boolean!
  id: String
  model: String
  platform: Platform!
  token: String!
  updatedAt: DateTime
  version: String
}

input DeviceScalarWhereInput {
  AND: [DeviceScalarWhereInput!]
  createdAt: DateTimeFilter
  enable: BoolFilter
  id: StringFilter
  model: StringNullableFilter
  NOT: [DeviceScalarWhereInput!]
  OR: [DeviceScalarWhereInput!]
  platform: EnumPlatformFilter
  token: StringFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
  version: StringNullableFilter
}

input DeviceUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  enable: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  model: NullableStringFieldUpdateOperationsInput
  platform: EnumPlatformFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: NullableStringFieldUpdateOperationsInput
}

input DeviceUpdateManyWithoutUserInput {
  connect: [DeviceWhereUniqueInput!]
  connectOrCreate: [DeviceCreateOrConnectWithoutUserInput!]
  create: [DeviceCreateWithoutUserInput!]
  createMany: DeviceCreateManyUserInputEnvelope
  delete: [DeviceWhereUniqueInput!]
  deleteMany: [DeviceScalarWhereInput!]
  disconnect: [DeviceWhereUniqueInput!]
  set: [DeviceWhereUniqueInput!]
  update: [DeviceUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [DeviceUpdateManyWithWhereWithoutUserInput!]
  upsert: [DeviceUpsertWithWhereUniqueWithoutUserInput!]
}

input DeviceUpdateManyWithWhereWithoutUserInput {
  data: DeviceUpdateManyMutationInput!
  where: DeviceScalarWhereInput!
}

input DeviceUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  enable: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  model: NullableStringFieldUpdateOperationsInput
  platform: EnumPlatformFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  version: NullableStringFieldUpdateOperationsInput
}

input DeviceUpdateWithWhereUniqueWithoutUserInput {
  data: DeviceUpdateWithoutUserInput!
  where: DeviceWhereUniqueInput!
}

input DeviceUpsertWithWhereUniqueWithoutUserInput {
  create: DeviceCreateWithoutUserInput!
  update: DeviceUpdateWithoutUserInput!
  where: DeviceWhereUniqueInput!
}

input DeviceWhereUniqueInput {
  id: String
}

type DisableTwoFactor {
  success: Boolean
}

input EnumApprovedStatusNullableFilter {
  equals: ApprovedStatus
  in: [ApprovedStatus!]
  not: NestedEnumApprovedStatusNullableFilter
  notIn: [ApprovedStatus!]
}

input EnumConvertionDirectionFieldUpdateOperationsInput {
  set: ConvertionDirection
}

input EnumConvertionDirectionFilter {
  equals: ConvertionDirection
  in: [ConvertionDirection!]
  not: NestedEnumConvertionDirectionFilter
  notIn: [ConvertionDirection!]
}

input EnumDestinationTypeFieldUpdateOperationsInput {
  set: DestinationType
}

input EnumDestinationTypeFilter {
  equals: DestinationType
  in: [DestinationType!]
  not: NestedEnumDestinationTypeFilter
  notIn: [DestinationType!]
}

input EnumInternalTransactionStatusFieldUpdateOperationsInput {
  set: InternalTransactionStatus
}

input EnumInternalTransactionStatusFilter {
  equals: InternalTransactionStatus
  in: [InternalTransactionStatus!]
  not: NestedEnumInternalTransactionStatusFilter
  notIn: [InternalTransactionStatus!]
}

input EnumInternalTransactionTypeFieldUpdateOperationsInput {
  set: InternalTransactionType
}

input EnumInternalTransactionTypeFilter {
  equals: InternalTransactionType
  in: [InternalTransactionType!]
  not: NestedEnumInternalTransactionTypeFilter
  notIn: [InternalTransactionType!]
}

input EnumMasterTransactionTypeFieldUpdateOperationsInput {
  set: MasterTransactionType
}

input EnumMasterTransactionTypeFilter {
  equals: MasterTransactionType
  in: [MasterTransactionType!]
  not: NestedEnumMasterTransactionTypeFilter
  notIn: [MasterTransactionType!]
}

input EnumNotificationTypeFieldUpdateOperationsInput {
  set: NotificationType
}

input EnumNotificationTypeFilter {
  equals: NotificationType
  in: [NotificationType!]
  not: NestedEnumNotificationTypeFilter
  notIn: [NotificationType!]
}

input EnumPlatformFieldUpdateOperationsInput {
  set: Platform
}

input EnumPlatformFilter {
  equals: Platform
  in: [Platform!]
  not: NestedEnumPlatformFilter
  notIn: [Platform!]
}

input EnumPromotionCodeTransactionTypeFieldUpdateOperationsInput {
  set: PromotionCodeTransactionType
}

input EnumPromotionCodeTransactionTypeFilter {
  equals: PromotionCodeTransactionType
  in: [PromotionCodeTransactionType!]
  not: NestedEnumPromotionCodeTransactionTypeFilter
  notIn: [PromotionCodeTransactionType!]
}

input EnumPromotionTypeFieldUpdateOperationsInput {
  set: PromotionType
}

input EnumPromotionTypeFilter {
  equals: PromotionType
  in: [PromotionType!]
  not: NestedEnumPromotionTypeFilter
  notIn: [PromotionType!]
}

input EnumRefTransactionEventTypeFieldUpdateOperationsInput {
  set: RefTransactionEventType
}

input EnumRefTransactionEventTypeFilter {
  equals: RefTransactionEventType
  in: [RefTransactionEventType!]
  not: NestedEnumRefTransactionEventTypeFilter
  notIn: [RefTransactionEventType!]
}

input EnumTicketPRIORITYFieldUpdateOperationsInput {
  set: TicketPRIORITY
}

input EnumTicketPRIORITYFilter {
  equals: TicketPRIORITY
  in: [TicketPRIORITY!]
  not: NestedEnumTicketPRIORITYFilter
  notIn: [TicketPRIORITY!]
}

input EnumTicketStatusFieldUpdateOperationsInput {
  set: TicketStatus
}

input EnumTicketStatusFilter {
  equals: TicketStatus
  in: [TicketStatus!]
  not: NestedEnumTicketStatusFilter
  notIn: [TicketStatus!]
}

input EnumTransactionStatusFieldUpdateOperationsInput {
  set: TransactionStatus
}

input EnumTransactionStatusFilter {
  equals: TransactionStatus
  in: [TransactionStatus!]
  not: NestedEnumTransactionStatusFilter
  notIn: [TransactionStatus!]
}

input EnumTransactionTypeFieldUpdateOperationsInput {
  set: TransactionType
}

input EnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
  notIn: [TransactionType!]
}

input EnumTwoFactorStatusFieldUpdateOperationsInput {
  set: TwoFactorStatus
}

input EnumTwoFactorStatusFilter {
  equals: TwoFactorStatus
  in: [TwoFactorStatus!]
  not: NestedEnumTwoFactorStatusFilter
  notIn: [TwoFactorStatus!]
}

input EnumUserProfileStatusFieldUpdateOperationsInput {
  set: UserProfileStatus
}

input EnumUserRoleFieldUpdateOperationsInput {
  set: UserRole
}

input EnumWalletChangeEventTypeFieldUpdateOperationsInput {
  set: WalletChangeEventType
}

input EnumWalletChangeEventTypeFilter {
  equals: WalletChangeEventType
  in: [WalletChangeEventType!]
  not: NestedEnumWalletChangeEventTypeFilter
  notIn: [WalletChangeEventType!]
}

type ExchangeDetail {
  agency: Float
  balance: Float
  convertIn: Float
  convertOut: Float
  drawRound: Float
  loseRound: Float
  profit: Float
  promotion: Float
  promotionCode: Float
  ref: Float
  refund: Float
  refundRound: Float
  revenue: Float
  totalIn: Float
  totalOut: Float
  totalRound: Float
  totalTradeAmount: Float
  transferIn: Float
  transferOut: Float
  winRound: Float
}

type ExchangeSumary {
  demo: ExchangeDetail
  main: ExchangeDetail
  promotion: ExchangeDetail
}

type ExchangeWalletSumary {
  agency: Float
  balance: Float
  bet: Float
  convertIn: Float
  convertOut: Float
  manualIn: Float
  promotion: Float
  promotionCode: Float
  ref: Float
  refund: Float
  totalIn: Float
  totalOut: Float
  transferIn: Float
  transferOut: Float
  win: Float
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

type Foo {
  close: Float
  countDown: Int
  date: Float
  f: Boolean
  high: Float
  low: Float
  open: Float
}

type HashTransactionInfoPayload {
  amount: Float
  symbol: String
  tx_hash: String
}

type InternalTransaction {
  address: String!
  amount: Float!
  createdAt: DateTime!
  id: String!
  status: InternalTransactionStatus!
  tx_hash: String
  tx_type: InternalTransactionType!
}

type InternalTransactionAggregate {
  count: Int
}

input InternalTransactionCreateManyUserInput {
  address: String!
  amount: Float!
  createdAt: DateTime
  id: String
  status: InternalTransactionStatus
  tx_hash: String
  tx_type: InternalTransactionType!
  updatedAt: DateTime
}

input InternalTransactionCreateManyUserInputEnvelope {
  data: [InternalTransactionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input InternalTransactionCreateNestedManyWithoutUserInput {
  connect: [InternalTransactionWhereUniqueInput!]
  connectOrCreate: [InternalTransactionCreateOrConnectWithoutUserInput!]
  create: [InternalTransactionCreateWithoutUserInput!]
  createMany: InternalTransactionCreateManyUserInputEnvelope
}

input InternalTransactionCreateOrConnectWithoutUserInput {
  create: InternalTransactionCreateWithoutUserInput!
  where: InternalTransactionWhereUniqueInput!
}

input InternalTransactionCreateWithoutUserInput {
  address: String!
  amount: Float!
  createdAt: DateTime
  id: String
  status: InternalTransactionStatus
  tx_hash: String
  tx_type: InternalTransactionType!
  updatedAt: DateTime
}

input InternalTransactionScalarWhereInput {
  address: StringFilter
  amount: FloatFilter
  AND: [InternalTransactionScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [InternalTransactionScalarWhereInput!]
  OR: [InternalTransactionScalarWhereInput!]
  status: EnumInternalTransactionStatusFilter
  tx_hash: StringNullableFilter
  tx_type: EnumInternalTransactionTypeFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

enum InternalTransactionStatus {
  FAILED
  PENDING
  SUCCEED
}

enum InternalTransactionType {
  RECEIVE
  SEND
}

input InternalTransactionUpdateManyMutationInput {
  address: StringFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: EnumInternalTransactionStatusFieldUpdateOperationsInput
  tx_hash: NullableStringFieldUpdateOperationsInput
  tx_type: EnumInternalTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input InternalTransactionUpdateManyWithoutUserInput {
  connect: [InternalTransactionWhereUniqueInput!]
  connectOrCreate: [InternalTransactionCreateOrConnectWithoutUserInput!]
  create: [InternalTransactionCreateWithoutUserInput!]
  createMany: InternalTransactionCreateManyUserInputEnvelope
  delete: [InternalTransactionWhereUniqueInput!]
  deleteMany: [InternalTransactionScalarWhereInput!]
  disconnect: [InternalTransactionWhereUniqueInput!]
  set: [InternalTransactionWhereUniqueInput!]
  update: [InternalTransactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [InternalTransactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [InternalTransactionUpsertWithWhereUniqueWithoutUserInput!]
}

input InternalTransactionUpdateManyWithWhereWithoutUserInput {
  data: InternalTransactionUpdateManyMutationInput!
  where: InternalTransactionScalarWhereInput!
}

input InternalTransactionUpdateWithoutUserInput {
  address: StringFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: EnumInternalTransactionStatusFieldUpdateOperationsInput
  tx_hash: NullableStringFieldUpdateOperationsInput
  tx_type: EnumInternalTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input InternalTransactionUpdateWithWhereUniqueWithoutUserInput {
  data: InternalTransactionUpdateWithoutUserInput!
  where: InternalTransactionWhereUniqueInput!
}

input InternalTransactionUpsertWithWhereUniqueWithoutUserInput {
  create: InternalTransactionCreateWithoutUserInput!
  update: InternalTransactionUpdateWithoutUserInput!
  where: InternalTransactionWhereUniqueInput!
}

input InternalTransactionWhereUniqueInput {
  id: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

scalar Json

input JsonNullableFilter {
  array_contains: Json
  array_ends_with: Json
  array_starts_with: Json
  equals: JsonNullValueFilter
  gt: Json
  gte: Json
  lt: Json
  lte: Json
  not: JsonNullValueFilter
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

enum JsonNullValueFilter {
  AnyNull
  DbNull
  JsonNull
}

type MainWallet {
  balance: Float
  balance_cache_datetime: DateTime!
  base_balance: Float!
  createdAt: DateTime!
  Currency: Currency!
  currency_id: String!
  id: String!
  is_frozen: Boolean!
  MainWalletAddress: MainWalletAddress
  updatedAt: DateTime!
  User: User!
  user_id: String!
}

type MainWalletAddress {
  address: String!
  balance: Float!
  encrypt_data: String
  id: String!
}

input MainWalletAddressCreateNestedOneWithoutMainWalletInput {
  connect: MainWalletAddressWhereUniqueInput
  connectOrCreate: MainWalletAddressCreateOrConnectWithoutMainWalletInput
  create: MainWalletAddressCreateWithoutMainWalletInput
}

input MainWalletAddressCreateNestedOneWithoutTransactionMasterInput {
  connect: MainWalletAddressWhereUniqueInput
  connectOrCreate: MainWalletAddressCreateOrConnectWithoutTransactionMasterInput
  create: MainWalletAddressCreateWithoutTransactionMasterInput
}

input MainWalletAddressCreateOrConnectWithoutMainWalletInput {
  create: MainWalletAddressCreateWithoutMainWalletInput!
  where: MainWalletAddressWhereUniqueInput!
}

input MainWalletAddressCreateOrConnectWithoutTransactionMasterInput {
  create: MainWalletAddressCreateWithoutTransactionMasterInput!
  where: MainWalletAddressWhereUniqueInput!
}

input MainWalletAddressCreateWithoutMainWalletInput {
  address: String!
  balance: Float
  createdAt: DateTime
  encrypt_data: String
  id: String
  need_sync_balance: Boolean
  TransactionMaster: TransactionMasterCreateNestedManyWithoutMainWalletAddressInput
  updatedAt: DateTime
}

input MainWalletAddressCreateWithoutTransactionMasterInput {
  address: String!
  balance: Float
  createdAt: DateTime
  encrypt_data: String
  id: String
  MainWallet: MainWalletCreateNestedOneWithoutMainWalletAddressInput!
  need_sync_balance: Boolean
  updatedAt: DateTime
}

input MainWalletAddressUpdateOneWithoutMainWalletInput {
  connect: MainWalletAddressWhereUniqueInput
  connectOrCreate: MainWalletAddressCreateOrConnectWithoutMainWalletInput
  create: MainWalletAddressCreateWithoutMainWalletInput
  delete: Boolean
  disconnect: Boolean
  update: MainWalletAddressUpdateWithoutMainWalletInput
  upsert: MainWalletAddressUpsertWithoutMainWalletInput
}

input MainWalletAddressUpdateOneWithoutTransactionMasterInput {
  connect: MainWalletAddressWhereUniqueInput
  connectOrCreate: MainWalletAddressCreateOrConnectWithoutTransactionMasterInput
  create: MainWalletAddressCreateWithoutTransactionMasterInput
  delete: Boolean
  disconnect: Boolean
  update: MainWalletAddressUpdateWithoutTransactionMasterInput
  upsert: MainWalletAddressUpsertWithoutTransactionMasterInput
}

input MainWalletAddressUpdateWithoutMainWalletInput {
  address: StringFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  encrypt_data: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  need_sync_balance: BoolFieldUpdateOperationsInput
  TransactionMaster: TransactionMasterUpdateManyWithoutMainWalletAddressInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MainWalletAddressUpdateWithoutTransactionMasterInput {
  address: StringFieldUpdateOperationsInput
  balance: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  encrypt_data: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateOneRequiredWithoutMainWalletAddressInput
  need_sync_balance: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MainWalletAddressUpsertWithoutMainWalletInput {
  create: MainWalletAddressCreateWithoutMainWalletInput!
  update: MainWalletAddressUpdateWithoutMainWalletInput!
}

input MainWalletAddressUpsertWithoutTransactionMasterInput {
  create: MainWalletAddressCreateWithoutTransactionMasterInput!
  update: MainWalletAddressUpdateWithoutTransactionMasterInput!
}

input MainWalletAddressWhereUniqueInput {
  id: String
  main_wallet_id: String
}

type MainWalletChange {
  amount: Float!
  createdAt: DateTime!
  event_id: String!
  event_type: WalletChangeEventType!
  id: String!
  main_wallet_id: String!
  MainWallet: MainWallet!
  updatedAt: DateTime!
}

input MainWalletChangeCreateManyMainWalletInput {
  amount: Float!
  createdAt: DateTime
  event_id: String!
  event_type: WalletChangeEventType!
  id: String
  updatedAt: DateTime
}

input MainWalletChangeCreateManyMainWalletInputEnvelope {
  data: [MainWalletChangeCreateManyMainWalletInput!]
  skipDuplicates: Boolean
}

input MainWalletChangeCreateNestedManyWithoutMainWalletInput {
  connect: [MainWalletChangeWhereUniqueInput!]
  connectOrCreate: [MainWalletChangeCreateOrConnectWithoutMainWalletInput!]
  create: [MainWalletChangeCreateWithoutMainWalletInput!]
  createMany: MainWalletChangeCreateManyMainWalletInputEnvelope
}

input MainWalletChangeCreateOrConnectWithoutMainWalletInput {
  create: MainWalletChangeCreateWithoutMainWalletInput!
  where: MainWalletChangeWhereUniqueInput!
}

input MainWalletChangeCreateWithoutMainWalletInput {
  amount: Float!
  createdAt: DateTime
  event_id: String!
  event_type: WalletChangeEventType!
  id: String
  updatedAt: DateTime
}

type MainWalletChangePagination {
  nodes: [MainWalletChange]
  total: Int
}

input MainWalletChangeScalarWhereInput {
  amount: FloatFilter
  AND: [MainWalletChangeScalarWhereInput!]
  createdAt: DateTimeFilter
  event_id: StringFilter
  event_type: EnumWalletChangeEventTypeFilter
  id: StringFilter
  main_wallet_id: StringFilter
  NOT: [MainWalletChangeScalarWhereInput!]
  OR: [MainWalletChangeScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input MainWalletChangeUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event_id: StringFieldUpdateOperationsInput
  event_type: EnumWalletChangeEventTypeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MainWalletChangeUpdateManyWithoutMainWalletInput {
  connect: [MainWalletChangeWhereUniqueInput!]
  connectOrCreate: [MainWalletChangeCreateOrConnectWithoutMainWalletInput!]
  create: [MainWalletChangeCreateWithoutMainWalletInput!]
  createMany: MainWalletChangeCreateManyMainWalletInputEnvelope
  delete: [MainWalletChangeWhereUniqueInput!]
  deleteMany: [MainWalletChangeScalarWhereInput!]
  disconnect: [MainWalletChangeWhereUniqueInput!]
  set: [MainWalletChangeWhereUniqueInput!]
  update: [MainWalletChangeUpdateWithWhereUniqueWithoutMainWalletInput!]
  updateMany: [MainWalletChangeUpdateManyWithWhereWithoutMainWalletInput!]
  upsert: [MainWalletChangeUpsertWithWhereUniqueWithoutMainWalletInput!]
}

input MainWalletChangeUpdateManyWithWhereWithoutMainWalletInput {
  data: MainWalletChangeUpdateManyMutationInput!
  where: MainWalletChangeScalarWhereInput!
}

input MainWalletChangeUpdateWithoutMainWalletInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event_id: StringFieldUpdateOperationsInput
  event_type: EnumWalletChangeEventTypeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MainWalletChangeUpdateWithWhereUniqueWithoutMainWalletInput {
  data: MainWalletChangeUpdateWithoutMainWalletInput!
  where: MainWalletChangeWhereUniqueInput!
}

input MainWalletChangeUpsertWithWhereUniqueWithoutMainWalletInput {
  create: MainWalletChangeCreateWithoutMainWalletInput!
  update: MainWalletChangeUpdateWithoutMainWalletInput!
  where: MainWalletChangeWhereUniqueInput!
}

input MainWalletChangeWhereUniqueInput {
  id: String
}

type MainWalletConnectionPayload {
  nodes: [MainWallet]
  total: Int
}

input MainWalletCreateManyCurrencyInput {
  balance_cache_datetime: DateTime
  base_balance: Float
  createdAt: DateTime
  id: String
  is_frozen: Boolean
  updatedAt: DateTime
  user_id: String!
}

input MainWalletCreateManyCurrencyInputEnvelope {
  data: [MainWalletCreateManyCurrencyInput!]
  skipDuplicates: Boolean
}

input MainWalletCreateManyUserInput {
  balance_cache_datetime: DateTime
  base_balance: Float
  createdAt: DateTime
  currency_id: String!
  id: String
  is_frozen: Boolean
  updatedAt: DateTime
}

input MainWalletCreateManyUserInputEnvelope {
  data: [MainWalletCreateManyUserInput!]
  skipDuplicates: Boolean
}

input MainWalletCreateNestedManyWithoutCurrencyInput {
  connect: [MainWalletWhereUniqueInput!]
  connectOrCreate: [MainWalletCreateOrConnectWithoutCurrencyInput!]
  create: [MainWalletCreateWithoutCurrencyInput!]
  createMany: MainWalletCreateManyCurrencyInputEnvelope
}

input MainWalletCreateNestedManyWithoutUserInput {
  connect: [MainWalletWhereUniqueInput!]
  connectOrCreate: [MainWalletCreateOrConnectWithoutUserInput!]
  create: [MainWalletCreateWithoutUserInput!]
  createMany: MainWalletCreateManyUserInputEnvelope
}

input MainWalletCreateNestedOneWithoutConvertionTransactionFromInput {
  connect: MainWalletWhereUniqueInput
  connectOrCreate: MainWalletCreateOrConnectWithoutConvertionTransactionFromInput
  create: MainWalletCreateWithoutConvertionTransactionFromInput
}

input MainWalletCreateNestedOneWithoutConvertionTransactionToInput {
  connect: MainWalletWhereUniqueInput
  connectOrCreate: MainWalletCreateOrConnectWithoutConvertionTransactionToInput
  create: MainWalletCreateWithoutConvertionTransactionToInput
}

input MainWalletCreateNestedOneWithoutMainWalletAddressInput {
  connect: MainWalletWhereUniqueInput
  connectOrCreate: MainWalletCreateOrConnectWithoutMainWalletAddressInput
  create: MainWalletCreateWithoutMainWalletAddressInput
}

input MainWalletCreateOrConnectWithoutConvertionTransactionFromInput {
  create: MainWalletCreateWithoutConvertionTransactionFromInput!
  where: MainWalletWhereUniqueInput!
}

input MainWalletCreateOrConnectWithoutConvertionTransactionToInput {
  create: MainWalletCreateWithoutConvertionTransactionToInput!
  where: MainWalletWhereUniqueInput!
}

input MainWalletCreateOrConnectWithoutCurrencyInput {
  create: MainWalletCreateWithoutCurrencyInput!
  where: MainWalletWhereUniqueInput!
}

input MainWalletCreateOrConnectWithoutMainWalletAddressInput {
  create: MainWalletCreateWithoutMainWalletAddressInput!
  where: MainWalletWhereUniqueInput!
}

input MainWalletCreateOrConnectWithoutUserInput {
  create: MainWalletCreateWithoutUserInput!
  where: MainWalletWhereUniqueInput!
}

input MainWalletCreateWithoutConvertionTransactionFromInput {
  balance_cache_datetime: DateTime
  base_balance: Float
  ConvertionTransactionTo: ConvertionTransactionCreateNestedManyWithoutMainWalletToInput
  createdAt: DateTime
  Currency: CurrencyCreateNestedOneWithoutMainWalletInput!
  id: String
  is_frozen: Boolean
  MainWalletAddress: MainWalletAddressCreateNestedOneWithoutMainWalletInput
  MainWalletChange: MainWalletChangeCreateNestedManyWithoutMainWalletInput
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutMainWalletInput!
}

input MainWalletCreateWithoutConvertionTransactionToInput {
  balance_cache_datetime: DateTime
  base_balance: Float
  ConvertionTransactionFrom: ConvertionTransactionCreateNestedManyWithoutMainWalletFromInput
  createdAt: DateTime
  Currency: CurrencyCreateNestedOneWithoutMainWalletInput!
  id: String
  is_frozen: Boolean
  MainWalletAddress: MainWalletAddressCreateNestedOneWithoutMainWalletInput
  MainWalletChange: MainWalletChangeCreateNestedManyWithoutMainWalletInput
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutMainWalletInput!
}

input MainWalletCreateWithoutCurrencyInput {
  balance_cache_datetime: DateTime
  base_balance: Float
  ConvertionTransactionFrom: ConvertionTransactionCreateNestedManyWithoutMainWalletFromInput
  ConvertionTransactionTo: ConvertionTransactionCreateNestedManyWithoutMainWalletToInput
  createdAt: DateTime
  id: String
  is_frozen: Boolean
  MainWalletAddress: MainWalletAddressCreateNestedOneWithoutMainWalletInput
  MainWalletChange: MainWalletChangeCreateNestedManyWithoutMainWalletInput
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutMainWalletInput!
}

input MainWalletCreateWithoutMainWalletAddressInput {
  balance_cache_datetime: DateTime
  base_balance: Float
  ConvertionTransactionFrom: ConvertionTransactionCreateNestedManyWithoutMainWalletFromInput
  ConvertionTransactionTo: ConvertionTransactionCreateNestedManyWithoutMainWalletToInput
  createdAt: DateTime
  Currency: CurrencyCreateNestedOneWithoutMainWalletInput!
  id: String
  is_frozen: Boolean
  MainWalletChange: MainWalletChangeCreateNestedManyWithoutMainWalletInput
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutMainWalletInput!
}

input MainWalletCreateWithoutUserInput {
  balance_cache_datetime: DateTime
  base_balance: Float
  ConvertionTransactionFrom: ConvertionTransactionCreateNestedManyWithoutMainWalletFromInput
  ConvertionTransactionTo: ConvertionTransactionCreateNestedManyWithoutMainWalletToInput
  createdAt: DateTime
  Currency: CurrencyCreateNestedOneWithoutMainWalletInput!
  id: String
  is_frozen: Boolean
  MainWalletAddress: MainWalletAddressCreateNestedOneWithoutMainWalletInput
  MainWalletChange: MainWalletChangeCreateNestedManyWithoutMainWalletInput
  updatedAt: DateTime
}

input MainWalletScalarWhereInput {
  AND: [MainWalletScalarWhereInput!]
  balance_cache_datetime: DateTimeFilter
  base_balance: FloatFilter
  createdAt: DateTimeFilter
  currency_id: StringFilter
  id: StringFilter
  is_frozen: BoolFilter
  NOT: [MainWalletScalarWhereInput!]
  OR: [MainWalletScalarWhereInput!]
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

type MainWalletTransaction {
  address: String
  amount: Float!
  approved_at: DateTime
  approved_by: User
  approved_status: ApprovedStatus
  confirmation: Int!
  createdAt: DateTime!
  Currency: Currency!
  estimate_usd: Float
  extra_data: Json
  fee: Float
  id: String!
  is_notified_admin: Boolean!
  status: TransactionStatus!
  tx_hash: String
  tx_type: TransactionType!
  updatedAt: DateTime!
  User: User!
}

type MainWalletTransactionAggregate {
  count: Int
}

input MainWalletTransactionCreateManyApproved_byInput {
  address: String
  amount: Float!
  approved_at: DateTime
  approved_status: ApprovedStatus
  confirmation: Int
  createdAt: DateTime
  currency_id: String!
  estimate_usd: Float
  extra_data: NullableJsonNullValueInput
  fee: Float
  id: String
  is_manual_deposit: Boolean
  is_notified_admin: Boolean
  status: TransactionStatus
  tx_hash: String
  tx_type: TransactionType!
  updatedAt: DateTime
  user_id: String!
}

input MainWalletTransactionCreateManyApproved_byInputEnvelope {
  data: [MainWalletTransactionCreateManyApproved_byInput!]
  skipDuplicates: Boolean
}

input MainWalletTransactionCreateManyCurrencyInput {
  address: String
  amount: Float!
  approved_at: DateTime
  approved_by_staff_id: String
  approved_status: ApprovedStatus
  confirmation: Int
  createdAt: DateTime
  estimate_usd: Float
  extra_data: NullableJsonNullValueInput
  fee: Float
  id: String
  is_manual_deposit: Boolean
  is_notified_admin: Boolean
  status: TransactionStatus
  tx_hash: String
  tx_type: TransactionType!
  updatedAt: DateTime
  user_id: String!
}

input MainWalletTransactionCreateManyCurrencyInputEnvelope {
  data: [MainWalletTransactionCreateManyCurrencyInput!]
  skipDuplicates: Boolean
}

input MainWalletTransactionCreateManyUserInput {
  address: String
  amount: Float!
  approved_at: DateTime
  approved_by_staff_id: String
  approved_status: ApprovedStatus
  confirmation: Int
  createdAt: DateTime
  currency_id: String!
  estimate_usd: Float
  extra_data: NullableJsonNullValueInput
  fee: Float
  id: String
  is_manual_deposit: Boolean
  is_notified_admin: Boolean
  status: TransactionStatus
  tx_hash: String
  tx_type: TransactionType!
  updatedAt: DateTime
}

input MainWalletTransactionCreateManyUserInputEnvelope {
  data: [MainWalletTransactionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input MainWalletTransactionCreateNestedManyWithoutApproved_byInput {
  connect: [MainWalletTransactionWhereUniqueInput!]
  connectOrCreate: [MainWalletTransactionCreateOrConnectWithoutApproved_byInput!]
  create: [MainWalletTransactionCreateWithoutApproved_byInput!]
  createMany: MainWalletTransactionCreateManyApproved_byInputEnvelope
}

input MainWalletTransactionCreateNestedManyWithoutCurrencyInput {
  connect: [MainWalletTransactionWhereUniqueInput!]
  connectOrCreate: [MainWalletTransactionCreateOrConnectWithoutCurrencyInput!]
  create: [MainWalletTransactionCreateWithoutCurrencyInput!]
  createMany: MainWalletTransactionCreateManyCurrencyInputEnvelope
}

input MainWalletTransactionCreateNestedManyWithoutUserInput {
  connect: [MainWalletTransactionWhereUniqueInput!]
  connectOrCreate: [MainWalletTransactionCreateOrConnectWithoutUserInput!]
  create: [MainWalletTransactionCreateWithoutUserInput!]
  createMany: MainWalletTransactionCreateManyUserInputEnvelope
}

input MainWalletTransactionCreateOrConnectWithoutApproved_byInput {
  create: MainWalletTransactionCreateWithoutApproved_byInput!
  where: MainWalletTransactionWhereUniqueInput!
}

input MainWalletTransactionCreateOrConnectWithoutCurrencyInput {
  create: MainWalletTransactionCreateWithoutCurrencyInput!
  where: MainWalletTransactionWhereUniqueInput!
}

input MainWalletTransactionCreateOrConnectWithoutUserInput {
  create: MainWalletTransactionCreateWithoutUserInput!
  where: MainWalletTransactionWhereUniqueInput!
}

input MainWalletTransactionCreateWithoutApproved_byInput {
  address: String
  amount: Float!
  approved_at: DateTime
  approved_status: ApprovedStatus
  confirmation: Int
  createdAt: DateTime
  Currency: CurrencyCreateNestedOneWithoutMainWalletTransactionInput!
  estimate_usd: Float
  extra_data: NullableJsonNullValueInput
  fee: Float
  id: String
  is_manual_deposit: Boolean
  is_notified_admin: Boolean
  status: TransactionStatus
  tx_hash: String
  tx_type: TransactionType!
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutMainWalletTransactionInput!
}

input MainWalletTransactionCreateWithoutCurrencyInput {
  address: String
  amount: Float!
  approved_at: DateTime
  approved_by: UserCreateNestedOneWithoutTransactionApproverInput
  approved_status: ApprovedStatus
  confirmation: Int
  createdAt: DateTime
  estimate_usd: Float
  extra_data: NullableJsonNullValueInput
  fee: Float
  id: String
  is_manual_deposit: Boolean
  is_notified_admin: Boolean
  status: TransactionStatus
  tx_hash: String
  tx_type: TransactionType!
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutMainWalletTransactionInput!
}

input MainWalletTransactionCreateWithoutUserInput {
  address: String
  amount: Float!
  approved_at: DateTime
  approved_by: UserCreateNestedOneWithoutTransactionApproverInput
  approved_status: ApprovedStatus
  confirmation: Int
  createdAt: DateTime
  Currency: CurrencyCreateNestedOneWithoutMainWalletTransactionInput!
  estimate_usd: Float
  extra_data: NullableJsonNullValueInput
  fee: Float
  id: String
  is_manual_deposit: Boolean
  is_notified_admin: Boolean
  status: TransactionStatus
  tx_hash: String
  tx_type: TransactionType!
  updatedAt: DateTime
}

input MainWalletTransactionScalarWhereInput {
  address: StringNullableFilter
  amount: FloatFilter
  AND: [MainWalletTransactionScalarWhereInput!]
  approved_at: DateTimeNullableFilter
  approved_by_staff_id: StringNullableFilter
  approved_status: EnumApprovedStatusNullableFilter
  confirmation: IntFilter
  createdAt: DateTimeFilter
  currency_id: StringFilter
  estimate_usd: FloatNullableFilter
  extra_data: JsonNullableFilter
  fee: FloatNullableFilter
  id: StringFilter
  is_manual_deposit: BoolFilter
  is_notified_admin: BoolFilter
  NOT: [MainWalletTransactionScalarWhereInput!]
  OR: [MainWalletTransactionScalarWhereInput!]
  status: EnumTransactionStatusFilter
  tx_hash: StringNullableFilter
  tx_type: EnumTransactionTypeFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

input MainWalletTransactionUpdateManyMutationInput {
  address: NullableStringFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  approved_at: NullableDateTimeFieldUpdateOperationsInput
  approved_status: NullableEnumApprovedStatusFieldUpdateOperationsInput
  confirmation: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  estimate_usd: NullableFloatFieldUpdateOperationsInput
  extra_data: NullableJsonNullValueInput
  fee: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_manual_deposit: BoolFieldUpdateOperationsInput
  is_notified_admin: BoolFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  tx_hash: NullableStringFieldUpdateOperationsInput
  tx_type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MainWalletTransactionUpdateManyWithoutApproved_byInput {
  connect: [MainWalletTransactionWhereUniqueInput!]
  connectOrCreate: [MainWalletTransactionCreateOrConnectWithoutApproved_byInput!]
  create: [MainWalletTransactionCreateWithoutApproved_byInput!]
  createMany: MainWalletTransactionCreateManyApproved_byInputEnvelope
  delete: [MainWalletTransactionWhereUniqueInput!]
  deleteMany: [MainWalletTransactionScalarWhereInput!]
  disconnect: [MainWalletTransactionWhereUniqueInput!]
  set: [MainWalletTransactionWhereUniqueInput!]
  update: [MainWalletTransactionUpdateWithWhereUniqueWithoutApproved_byInput!]
  updateMany: [MainWalletTransactionUpdateManyWithWhereWithoutApproved_byInput!]
  upsert: [MainWalletTransactionUpsertWithWhereUniqueWithoutApproved_byInput!]
}

input MainWalletTransactionUpdateManyWithoutCurrencyInput {
  connect: [MainWalletTransactionWhereUniqueInput!]
  connectOrCreate: [MainWalletTransactionCreateOrConnectWithoutCurrencyInput!]
  create: [MainWalletTransactionCreateWithoutCurrencyInput!]
  createMany: MainWalletTransactionCreateManyCurrencyInputEnvelope
  delete: [MainWalletTransactionWhereUniqueInput!]
  deleteMany: [MainWalletTransactionScalarWhereInput!]
  disconnect: [MainWalletTransactionWhereUniqueInput!]
  set: [MainWalletTransactionWhereUniqueInput!]
  update: [MainWalletTransactionUpdateWithWhereUniqueWithoutCurrencyInput!]
  updateMany: [MainWalletTransactionUpdateManyWithWhereWithoutCurrencyInput!]
  upsert: [MainWalletTransactionUpsertWithWhereUniqueWithoutCurrencyInput!]
}

input MainWalletTransactionUpdateManyWithoutUserInput {
  connect: [MainWalletTransactionWhereUniqueInput!]
  connectOrCreate: [MainWalletTransactionCreateOrConnectWithoutUserInput!]
  create: [MainWalletTransactionCreateWithoutUserInput!]
  createMany: MainWalletTransactionCreateManyUserInputEnvelope
  delete: [MainWalletTransactionWhereUniqueInput!]
  deleteMany: [MainWalletTransactionScalarWhereInput!]
  disconnect: [MainWalletTransactionWhereUniqueInput!]
  set: [MainWalletTransactionWhereUniqueInput!]
  update: [MainWalletTransactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MainWalletTransactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [MainWalletTransactionUpsertWithWhereUniqueWithoutUserInput!]
}

input MainWalletTransactionUpdateManyWithWhereWithoutApproved_byInput {
  data: MainWalletTransactionUpdateManyMutationInput!
  where: MainWalletTransactionScalarWhereInput!
}

input MainWalletTransactionUpdateManyWithWhereWithoutCurrencyInput {
  data: MainWalletTransactionUpdateManyMutationInput!
  where: MainWalletTransactionScalarWhereInput!
}

input MainWalletTransactionUpdateManyWithWhereWithoutUserInput {
  data: MainWalletTransactionUpdateManyMutationInput!
  where: MainWalletTransactionScalarWhereInput!
}

input MainWalletTransactionUpdateWithoutApproved_byInput {
  address: NullableStringFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  approved_at: NullableDateTimeFieldUpdateOperationsInput
  approved_status: NullableEnumApprovedStatusFieldUpdateOperationsInput
  confirmation: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Currency: CurrencyUpdateOneRequiredWithoutMainWalletTransactionInput
  estimate_usd: NullableFloatFieldUpdateOperationsInput
  extra_data: NullableJsonNullValueInput
  fee: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_manual_deposit: BoolFieldUpdateOperationsInput
  is_notified_admin: BoolFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  tx_hash: NullableStringFieldUpdateOperationsInput
  tx_type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutMainWalletTransactionInput
}

input MainWalletTransactionUpdateWithoutCurrencyInput {
  address: NullableStringFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  approved_at: NullableDateTimeFieldUpdateOperationsInput
  approved_by: UserUpdateOneWithoutTransactionApproverInput
  approved_status: NullableEnumApprovedStatusFieldUpdateOperationsInput
  confirmation: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  estimate_usd: NullableFloatFieldUpdateOperationsInput
  extra_data: NullableJsonNullValueInput
  fee: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_manual_deposit: BoolFieldUpdateOperationsInput
  is_notified_admin: BoolFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  tx_hash: NullableStringFieldUpdateOperationsInput
  tx_type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutMainWalletTransactionInput
}

input MainWalletTransactionUpdateWithoutUserInput {
  address: NullableStringFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  approved_at: NullableDateTimeFieldUpdateOperationsInput
  approved_by: UserUpdateOneWithoutTransactionApproverInput
  approved_status: NullableEnumApprovedStatusFieldUpdateOperationsInput
  confirmation: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Currency: CurrencyUpdateOneRequiredWithoutMainWalletTransactionInput
  estimate_usd: NullableFloatFieldUpdateOperationsInput
  extra_data: NullableJsonNullValueInput
  fee: NullableFloatFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_manual_deposit: BoolFieldUpdateOperationsInput
  is_notified_admin: BoolFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  tx_hash: NullableStringFieldUpdateOperationsInput
  tx_type: EnumTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MainWalletTransactionUpdateWithWhereUniqueWithoutApproved_byInput {
  data: MainWalletTransactionUpdateWithoutApproved_byInput!
  where: MainWalletTransactionWhereUniqueInput!
}

input MainWalletTransactionUpdateWithWhereUniqueWithoutCurrencyInput {
  data: MainWalletTransactionUpdateWithoutCurrencyInput!
  where: MainWalletTransactionWhereUniqueInput!
}

input MainWalletTransactionUpdateWithWhereUniqueWithoutUserInput {
  data: MainWalletTransactionUpdateWithoutUserInput!
  where: MainWalletTransactionWhereUniqueInput!
}

input MainWalletTransactionUpsertWithWhereUniqueWithoutApproved_byInput {
  create: MainWalletTransactionCreateWithoutApproved_byInput!
  update: MainWalletTransactionUpdateWithoutApproved_byInput!
  where: MainWalletTransactionWhereUniqueInput!
}

input MainWalletTransactionUpsertWithWhereUniqueWithoutCurrencyInput {
  create: MainWalletTransactionCreateWithoutCurrencyInput!
  update: MainWalletTransactionUpdateWithoutCurrencyInput!
  where: MainWalletTransactionWhereUniqueInput!
}

input MainWalletTransactionUpsertWithWhereUniqueWithoutUserInput {
  create: MainWalletTransactionCreateWithoutUserInput!
  update: MainWalletTransactionUpdateWithoutUserInput!
  where: MainWalletTransactionWhereUniqueInput!
}

input MainWalletTransactionWhereUniqueInput {
  id: String
}

input MainWalletUpdateManyMutationInput {
  balance_cache_datetime: DateTimeFieldUpdateOperationsInput
  base_balance: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_frozen: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MainWalletUpdateManyWithoutCurrencyInput {
  connect: [MainWalletWhereUniqueInput!]
  connectOrCreate: [MainWalletCreateOrConnectWithoutCurrencyInput!]
  create: [MainWalletCreateWithoutCurrencyInput!]
  createMany: MainWalletCreateManyCurrencyInputEnvelope
  delete: [MainWalletWhereUniqueInput!]
  deleteMany: [MainWalletScalarWhereInput!]
  disconnect: [MainWalletWhereUniqueInput!]
  set: [MainWalletWhereUniqueInput!]
  update: [MainWalletUpdateWithWhereUniqueWithoutCurrencyInput!]
  updateMany: [MainWalletUpdateManyWithWhereWithoutCurrencyInput!]
  upsert: [MainWalletUpsertWithWhereUniqueWithoutCurrencyInput!]
}

input MainWalletUpdateManyWithoutUserInput {
  connect: [MainWalletWhereUniqueInput!]
  connectOrCreate: [MainWalletCreateOrConnectWithoutUserInput!]
  create: [MainWalletCreateWithoutUserInput!]
  createMany: MainWalletCreateManyUserInputEnvelope
  delete: [MainWalletWhereUniqueInput!]
  deleteMany: [MainWalletScalarWhereInput!]
  disconnect: [MainWalletWhereUniqueInput!]
  set: [MainWalletWhereUniqueInput!]
  update: [MainWalletUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MainWalletUpdateManyWithWhereWithoutUserInput!]
  upsert: [MainWalletUpsertWithWhereUniqueWithoutUserInput!]
}

input MainWalletUpdateManyWithWhereWithoutCurrencyInput {
  data: MainWalletUpdateManyMutationInput!
  where: MainWalletScalarWhereInput!
}

input MainWalletUpdateManyWithWhereWithoutUserInput {
  data: MainWalletUpdateManyMutationInput!
  where: MainWalletScalarWhereInput!
}

input MainWalletUpdateOneRequiredWithoutConvertionTransactionFromInput {
  connect: MainWalletWhereUniqueInput
  connectOrCreate: MainWalletCreateOrConnectWithoutConvertionTransactionFromInput
  create: MainWalletCreateWithoutConvertionTransactionFromInput
  update: MainWalletUpdateWithoutConvertionTransactionFromInput
  upsert: MainWalletUpsertWithoutConvertionTransactionFromInput
}

input MainWalletUpdateOneRequiredWithoutConvertionTransactionToInput {
  connect: MainWalletWhereUniqueInput
  connectOrCreate: MainWalletCreateOrConnectWithoutConvertionTransactionToInput
  create: MainWalletCreateWithoutConvertionTransactionToInput
  update: MainWalletUpdateWithoutConvertionTransactionToInput
  upsert: MainWalletUpsertWithoutConvertionTransactionToInput
}

input MainWalletUpdateOneRequiredWithoutMainWalletAddressInput {
  connect: MainWalletWhereUniqueInput
  connectOrCreate: MainWalletCreateOrConnectWithoutMainWalletAddressInput
  create: MainWalletCreateWithoutMainWalletAddressInput
  update: MainWalletUpdateWithoutMainWalletAddressInput
  upsert: MainWalletUpsertWithoutMainWalletAddressInput
}

input MainWalletUpdateWithoutConvertionTransactionFromInput {
  balance_cache_datetime: DateTimeFieldUpdateOperationsInput
  base_balance: FloatFieldUpdateOperationsInput
  ConvertionTransactionTo: ConvertionTransactionUpdateManyWithoutMainWalletToInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Currency: CurrencyUpdateOneRequiredWithoutMainWalletInput
  id: StringFieldUpdateOperationsInput
  is_frozen: BoolFieldUpdateOperationsInput
  MainWalletAddress: MainWalletAddressUpdateOneWithoutMainWalletInput
  MainWalletChange: MainWalletChangeUpdateManyWithoutMainWalletInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutMainWalletInput
}

input MainWalletUpdateWithoutConvertionTransactionToInput {
  balance_cache_datetime: DateTimeFieldUpdateOperationsInput
  base_balance: FloatFieldUpdateOperationsInput
  ConvertionTransactionFrom: ConvertionTransactionUpdateManyWithoutMainWalletFromInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Currency: CurrencyUpdateOneRequiredWithoutMainWalletInput
  id: StringFieldUpdateOperationsInput
  is_frozen: BoolFieldUpdateOperationsInput
  MainWalletAddress: MainWalletAddressUpdateOneWithoutMainWalletInput
  MainWalletChange: MainWalletChangeUpdateManyWithoutMainWalletInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutMainWalletInput
}

input MainWalletUpdateWithoutCurrencyInput {
  balance_cache_datetime: DateTimeFieldUpdateOperationsInput
  base_balance: FloatFieldUpdateOperationsInput
  ConvertionTransactionFrom: ConvertionTransactionUpdateManyWithoutMainWalletFromInput
  ConvertionTransactionTo: ConvertionTransactionUpdateManyWithoutMainWalletToInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_frozen: BoolFieldUpdateOperationsInput
  MainWalletAddress: MainWalletAddressUpdateOneWithoutMainWalletInput
  MainWalletChange: MainWalletChangeUpdateManyWithoutMainWalletInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutMainWalletInput
}

input MainWalletUpdateWithoutMainWalletAddressInput {
  balance_cache_datetime: DateTimeFieldUpdateOperationsInput
  base_balance: FloatFieldUpdateOperationsInput
  ConvertionTransactionFrom: ConvertionTransactionUpdateManyWithoutMainWalletFromInput
  ConvertionTransactionTo: ConvertionTransactionUpdateManyWithoutMainWalletToInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Currency: CurrencyUpdateOneRequiredWithoutMainWalletInput
  id: StringFieldUpdateOperationsInput
  is_frozen: BoolFieldUpdateOperationsInput
  MainWalletChange: MainWalletChangeUpdateManyWithoutMainWalletInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutMainWalletInput
}

input MainWalletUpdateWithoutUserInput {
  balance_cache_datetime: DateTimeFieldUpdateOperationsInput
  base_balance: FloatFieldUpdateOperationsInput
  ConvertionTransactionFrom: ConvertionTransactionUpdateManyWithoutMainWalletFromInput
  ConvertionTransactionTo: ConvertionTransactionUpdateManyWithoutMainWalletToInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Currency: CurrencyUpdateOneRequiredWithoutMainWalletInput
  id: StringFieldUpdateOperationsInput
  is_frozen: BoolFieldUpdateOperationsInput
  MainWalletAddress: MainWalletAddressUpdateOneWithoutMainWalletInput
  MainWalletChange: MainWalletChangeUpdateManyWithoutMainWalletInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MainWalletUpdateWithWhereUniqueWithoutCurrencyInput {
  data: MainWalletUpdateWithoutCurrencyInput!
  where: MainWalletWhereUniqueInput!
}

input MainWalletUpdateWithWhereUniqueWithoutUserInput {
  data: MainWalletUpdateWithoutUserInput!
  where: MainWalletWhereUniqueInput!
}

input MainWalletUpsertWithoutConvertionTransactionFromInput {
  create: MainWalletCreateWithoutConvertionTransactionFromInput!
  update: MainWalletUpdateWithoutConvertionTransactionFromInput!
}

input MainWalletUpsertWithoutConvertionTransactionToInput {
  create: MainWalletCreateWithoutConvertionTransactionToInput!
  update: MainWalletUpdateWithoutConvertionTransactionToInput!
}

input MainWalletUpsertWithoutMainWalletAddressInput {
  create: MainWalletCreateWithoutMainWalletAddressInput!
  update: MainWalletUpdateWithoutMainWalletAddressInput!
}

input MainWalletUpsertWithWhereUniqueWithoutCurrencyInput {
  create: MainWalletCreateWithoutCurrencyInput!
  update: MainWalletUpdateWithoutCurrencyInput!
  where: MainWalletWhereUniqueInput!
}

input MainWalletUpsertWithWhereUniqueWithoutUserInput {
  create: MainWalletCreateWithoutUserInput!
  update: MainWalletUpdateWithoutUserInput!
  where: MainWalletWhereUniqueInput!
}

input MainWalletWhereUniqueInput {
  id: String
}

input ManualTransactionCreateManyUserInput {
  amount: Float!
  createdAt: DateTime
  destination_id: String!
  detination_type: DestinationType!
  id: String
  reason: String!
  updatedAt: DateTime
}

input ManualTransactionCreateManyUserInputEnvelope {
  data: [ManualTransactionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input ManualTransactionCreateNestedManyWithoutUserInput {
  connect: [ManualTransactionWhereUniqueInput!]
  connectOrCreate: [ManualTransactionCreateOrConnectWithoutUserInput!]
  create: [ManualTransactionCreateWithoutUserInput!]
  createMany: ManualTransactionCreateManyUserInputEnvelope
}

input ManualTransactionCreateOrConnectWithoutUserInput {
  create: ManualTransactionCreateWithoutUserInput!
  where: ManualTransactionWhereUniqueInput!
}

input ManualTransactionCreateWithoutUserInput {
  amount: Float!
  createdAt: DateTime
  destination_id: String!
  detination_type: DestinationType!
  id: String
  reason: String!
  updatedAt: DateTime
}

input ManualTransactionScalarWhereInput {
  amount: FloatFilter
  AND: [ManualTransactionScalarWhereInput!]
  createdAt: DateTimeFilter
  destination_id: StringFilter
  detination_type: EnumDestinationTypeFilter
  id: StringFilter
  NOT: [ManualTransactionScalarWhereInput!]
  OR: [ManualTransactionScalarWhereInput!]
  reason: StringFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

input ManualTransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  destination_id: StringFieldUpdateOperationsInput
  detination_type: EnumDestinationTypeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reason: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ManualTransactionUpdateManyWithoutUserInput {
  connect: [ManualTransactionWhereUniqueInput!]
  connectOrCreate: [ManualTransactionCreateOrConnectWithoutUserInput!]
  create: [ManualTransactionCreateWithoutUserInput!]
  createMany: ManualTransactionCreateManyUserInputEnvelope
  delete: [ManualTransactionWhereUniqueInput!]
  deleteMany: [ManualTransactionScalarWhereInput!]
  disconnect: [ManualTransactionWhereUniqueInput!]
  set: [ManualTransactionWhereUniqueInput!]
  update: [ManualTransactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ManualTransactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [ManualTransactionUpsertWithWhereUniqueWithoutUserInput!]
}

input ManualTransactionUpdateManyWithWhereWithoutUserInput {
  data: ManualTransactionUpdateManyMutationInput!
  where: ManualTransactionScalarWhereInput!
}

input ManualTransactionUpdateWithoutUserInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  destination_id: StringFieldUpdateOperationsInput
  detination_type: EnumDestinationTypeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reason: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ManualTransactionUpdateWithWhereUniqueWithoutUserInput {
  data: ManualTransactionUpdateWithoutUserInput!
  where: ManualTransactionWhereUniqueInput!
}

input ManualTransactionUpsertWithWhereUniqueWithoutUserInput {
  create: ManualTransactionCreateWithoutUserInput!
  update: ManualTransactionUpdateWithoutUserInput!
  where: ManualTransactionWhereUniqueInput!
}

input ManualTransactionWhereUniqueInput {
  id: String
}

enum MasterTransactionType {
  IN
  OUT
}

input MasterWalletCreateManyCurrencyInput {
  balance: Float
  balance_alerts: Float
  createdAt: DateTime
  encrypt_data: NullableJsonNullValueInput
  id: String
  scan_data: NullableJsonNullValueInput
  updatedAt: DateTime
}

input MasterWalletCreateManyCurrencyInputEnvelope {
  data: [MasterWalletCreateManyCurrencyInput!]
  skipDuplicates: Boolean
}

input MasterWalletCreateNestedManyWithoutCurrencyInput {
  connect: [MasterWalletWhereUniqueInput!]
  connectOrCreate: [MasterWalletCreateOrConnectWithoutCurrencyInput!]
  create: [MasterWalletCreateWithoutCurrencyInput!]
  createMany: MasterWalletCreateManyCurrencyInputEnvelope
}

input MasterWalletCreateOrConnectWithoutCurrencyInput {
  create: MasterWalletCreateWithoutCurrencyInput!
  where: MasterWalletWhereUniqueInput!
}

input MasterWalletCreateWithoutCurrencyInput {
  balance: Float
  balance_alerts: Float
  createdAt: DateTime
  encrypt_data: NullableJsonNullValueInput
  id: String
  scan_data: NullableJsonNullValueInput
  updatedAt: DateTime
}

input MasterWalletScalarWhereInput {
  AND: [MasterWalletScalarWhereInput!]
  balance: FloatNullableFilter
  balance_alerts: FloatNullableFilter
  createdAt: DateTimeFilter
  currency_id: StringFilter
  encrypt_data: JsonNullableFilter
  id: StringFilter
  NOT: [MasterWalletScalarWhereInput!]
  OR: [MasterWalletScalarWhereInput!]
  scan_data: JsonNullableFilter
  updatedAt: DateTimeFilter
}

input MasterWalletUpdateManyMutationInput {
  balance: NullableFloatFieldUpdateOperationsInput
  balance_alerts: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  encrypt_data: NullableJsonNullValueInput
  id: StringFieldUpdateOperationsInput
  scan_data: NullableJsonNullValueInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MasterWalletUpdateManyWithoutCurrencyInput {
  connect: [MasterWalletWhereUniqueInput!]
  connectOrCreate: [MasterWalletCreateOrConnectWithoutCurrencyInput!]
  create: [MasterWalletCreateWithoutCurrencyInput!]
  createMany: MasterWalletCreateManyCurrencyInputEnvelope
  delete: [MasterWalletWhereUniqueInput!]
  deleteMany: [MasterWalletScalarWhereInput!]
  disconnect: [MasterWalletWhereUniqueInput!]
  set: [MasterWalletWhereUniqueInput!]
  update: [MasterWalletUpdateWithWhereUniqueWithoutCurrencyInput!]
  updateMany: [MasterWalletUpdateManyWithWhereWithoutCurrencyInput!]
  upsert: [MasterWalletUpsertWithWhereUniqueWithoutCurrencyInput!]
}

input MasterWalletUpdateManyWithWhereWithoutCurrencyInput {
  data: MasterWalletUpdateManyMutationInput!
  where: MasterWalletScalarWhereInput!
}

input MasterWalletUpdateWithoutCurrencyInput {
  balance: NullableFloatFieldUpdateOperationsInput
  balance_alerts: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  encrypt_data: NullableJsonNullValueInput
  id: StringFieldUpdateOperationsInput
  scan_data: NullableJsonNullValueInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MasterWalletUpdateWithWhereUniqueWithoutCurrencyInput {
  data: MasterWalletUpdateWithoutCurrencyInput!
  where: MasterWalletWhereUniqueInput!
}

input MasterWalletUpsertWithWhereUniqueWithoutCurrencyInput {
  create: MasterWalletCreateWithoutCurrencyInput!
  update: MasterWalletUpdateWithoutCurrencyInput!
  where: MasterWalletWhereUniqueInput!
}

input MasterWalletWhereUniqueInput {
  id: String
}

type Mutation {
  ad_manualDeposit(amount: Float!, currency_id: String!, transaction_hash: String!, user_id: String!): AddTransactionPayload
  ad_updateTransaction(reason: String, status: ApprovedStatus!, transaction_id: String!): MainWalletTransaction
  adminUpdateOneConvertionPair(data: ConvertionPairUpdateInput!, where: ConvertionPairWhereUniqueInput!): AdminConvertionPair
  adminUpdateOneCurrency(data: CurrencyUpdateInput!, where: CurrencyWhereUniqueInput!): AdminCurrency
  adminUpdateOneRefLevel(data: RefLevelUpdateInput!, where: RefLevelWhereUniqueInput!): RefLevel
  changePassword(old_password: String!, password: String!, password_confirmation: String!): CoinheIDAuthMessagePayload
  convertCurrency(amount: Float!, currency_from: String!, currency_to: String!): ConvertCurrencyPayload
  createCurrency(icon: String, name: String!, symbol: String!): Currency
  createRef(refCode: String!, usernameUser: String!): Ref!
  createWalletRequest(currency_id: String!): MainWallet
  disableTwoFactor(captchaToken: String, password: String!, token: String!): DisableTwoFactor
  disableTwoFactorMobile(temporaryToken: String!, token: String!): DisableTwoFactor
  enableTwoFactor(captchaToken: String, password: String!, token: String!): TwoFactor
  enableTwoFactorMobile(temporaryToken: String!, token: String!): TwoFactor
  forgotPassword(email: String!): CoinheIDAuthMessagePayload
  generateTemporaryToken(captchaToken: String, password: String!): TemporaryToken
  generateToken(userName: String!): TokenLogin
  internalTransfer(amount: Float!, currencyId: String!, otpToken: String!, reciever: String!): WithdrawPayload
  login2(capchaToken: String!, isMobile: Boolean, password: String!, username: String!): CoinheAuthPayload
  loginAdmin(captchaToken: String, password: String!, username: String!): AdminAuthPayload
  loginWithTwoFa(otp: String!, userId: String!): CoinheAuthPayload
  logout(deviceToken: String!): Boolean
  manualSet(overwriteResult: String!): Boolean
  pushNotification(body: String!, title: String!, type: NotificationCategory): Boolean
  readAllNotify: Boolean
  register(email: String!, password: String!, password_confirmation: String!, refCode: String, username: String!): AuthPayload
  registerDevice(model: String, platform: Platform!, token: String!, version: String): Boolean
  resendActivationEmail(email: String!): Boolean
  resetPassword(email: String!, password: String!, password_confirmation: String!, token: String!): CoinheIDAuthMessagePayload
  updateProfile(bio: String, isNotifyNewsletter: Boolean, name: String, profitSharing: Float): UserProfile
  updateUser(permissions: [Permission], user_id: String): User
  uploadAvatar(file: Upload!): UploadFile
  verifyAccount(token: String!): CoinheIDAuthMessagePayload
  withdraw(address: String!, amount: Float!, currency_id: String!, memo: String, otpToken: String!): WithdrawPayload
  withdrawVND(accountName: String!, accountNumber: String!, amount: Float!, bank: String!, otpToken: String!): WithdrawPayload
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumApprovedStatusNullableFilter {
  equals: ApprovedStatus
  in: [ApprovedStatus!]
  not: NestedEnumApprovedStatusNullableFilter
  notIn: [ApprovedStatus!]
}

input NestedEnumConvertionDirectionFilter {
  equals: ConvertionDirection
  in: [ConvertionDirection!]
  not: NestedEnumConvertionDirectionFilter
  notIn: [ConvertionDirection!]
}

input NestedEnumDestinationTypeFilter {
  equals: DestinationType
  in: [DestinationType!]
  not: NestedEnumDestinationTypeFilter
  notIn: [DestinationType!]
}

input NestedEnumInternalTransactionStatusFilter {
  equals: InternalTransactionStatus
  in: [InternalTransactionStatus!]
  not: NestedEnumInternalTransactionStatusFilter
  notIn: [InternalTransactionStatus!]
}

input NestedEnumInternalTransactionTypeFilter {
  equals: InternalTransactionType
  in: [InternalTransactionType!]
  not: NestedEnumInternalTransactionTypeFilter
  notIn: [InternalTransactionType!]
}

input NestedEnumMasterTransactionTypeFilter {
  equals: MasterTransactionType
  in: [MasterTransactionType!]
  not: NestedEnumMasterTransactionTypeFilter
  notIn: [MasterTransactionType!]
}

input NestedEnumNotificationTypeFilter {
  equals: NotificationType
  in: [NotificationType!]
  not: NestedEnumNotificationTypeFilter
  notIn: [NotificationType!]
}

input NestedEnumPlatformFilter {
  equals: Platform
  in: [Platform!]
  not: NestedEnumPlatformFilter
  notIn: [Platform!]
}

input NestedEnumPromotionCodeTransactionTypeFilter {
  equals: PromotionCodeTransactionType
  in: [PromotionCodeTransactionType!]
  not: NestedEnumPromotionCodeTransactionTypeFilter
  notIn: [PromotionCodeTransactionType!]
}

input NestedEnumPromotionTypeFilter {
  equals: PromotionType
  in: [PromotionType!]
  not: NestedEnumPromotionTypeFilter
  notIn: [PromotionType!]
}

input NestedEnumRefTransactionEventTypeFilter {
  equals: RefTransactionEventType
  in: [RefTransactionEventType!]
  not: NestedEnumRefTransactionEventTypeFilter
  notIn: [RefTransactionEventType!]
}

input NestedEnumTicketPRIORITYFilter {
  equals: TicketPRIORITY
  in: [TicketPRIORITY!]
  not: NestedEnumTicketPRIORITYFilter
  notIn: [TicketPRIORITY!]
}

input NestedEnumTicketStatusFilter {
  equals: TicketStatus
  in: [TicketStatus!]
  not: NestedEnumTicketStatusFilter
  notIn: [TicketStatus!]
}

input NestedEnumTransactionStatusFilter {
  equals: TransactionStatus
  in: [TransactionStatus!]
  not: NestedEnumTransactionStatusFilter
  notIn: [TransactionStatus!]
}

input NestedEnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
  notIn: [TransactionType!]
}

input NestedEnumTwoFactorStatusFilter {
  equals: TwoFactorStatus
  in: [TwoFactorStatus!]
  not: NestedEnumTwoFactorStatusFilter
  notIn: [TwoFactorStatus!]
}

input NestedEnumWalletChangeEventTypeFilter {
  equals: WalletChangeEventType
  in: [WalletChangeEventType!]
  not: NestedEnumWalletChangeEventTypeFilter
  notIn: [WalletChangeEventType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""
A "Node" is an Object with a required ID field (id), per the https://relay.dev/docs/en/graphql-server-specification
"""
interface Node {
  id: ID!
}

type Notification {
  content: String!
  createdAt: DateTime!
  description: String!
  id: String!
  title: String!
  type: NotificationType!
  updatedAt: DateTime!
  User: User!
  user_id: String!
}

type NotificationAggregate {
  count: Int
}

enum NotificationCategory {
  AGENCY
  STAFF
}

input NotificationCreateManyUserInput {
  content: String!
  createdAt: DateTime
  description: String!
  id: String
  readed: Boolean
  title: String!
  type: NotificationType!
  updatedAt: DateTime
}

input NotificationCreateManyUserInputEnvelope {
  data: [NotificationCreateManyUserInput!]
  skipDuplicates: Boolean
}

input NotificationCreateNestedManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
}

input NotificationCreateOrConnectWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationCreateWithoutUserInput {
  content: String!
  createdAt: DateTime
  description: String!
  id: String
  readed: Boolean
  title: String!
  type: NotificationType!
  updatedAt: DateTime
}

type NotificationPagination {
  nodes: [Notification]
  total: Int
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  NOT: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  readed: BoolNullableFilter
  title: StringFilter
  type: EnumNotificationTypeFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

enum NotificationType {
  AGENCY
  AGENCY_COMMISSION
  BET
  CAMPAIGN
  COPYING
  DEPOSIT
  LOGIN
  REVERT_INVESTING_FUND
  SEND_GIFT_CODE
  TRADING_COMMISSION
  TRANSFER
  UPGRADE
  WIN
  WITHDRAW
}

input NotificationUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  readed: NullableBoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: EnumNotificationTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotificationUpdateManyWithWhereWithoutUserInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input NotificationUpdateManyWithWhereWithoutUserInput {
  data: NotificationUpdateManyMutationInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateWithoutUserInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  readed: NullableBoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  type: EnumNotificationTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  data: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  update: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationWhereUniqueInput {
  id: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumApprovedStatusFieldUpdateOperationsInput {
  set: ApprovedStatus
}

input NullableEnumCrypto_ServiceFieldUpdateOperationsInput {
  set: Crypto_Service
}

input NullableFloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

enum NullableJsonNullValueInput {
  DbNull
  JsonNull
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type PaginationCount {
  count: Int
}

enum Permission {
  CAN_APPROVE_TRANSACTION
  CAN_CHECK_TRANSACTION_HASH
  CAN_CREATE_TRANSACTION
  CAN_MANAGE_CATEGORY
  CAN_REPLY_TICKET
  CAN_UPDATE_CUSTOMER
  CAN_UPDATE_EXPERT
  CAN_UPDATE_STAFF
  CAN_VIEW_CUSTOMER
  CAN_VIEW_STAFF
  CAN_VIEW_STATISTIC
  CAN_VIEW_TICKET
  CAN_VIEW_TRANSACTION
  CAN_VIEW_WALLET
  CAN_VIEW_WALLET_CHANGE
}

enum Platform {
  ANDROID
  IOS
  WEB
}

type PoolInfo {
  totalBetAmount: Float
  totalCut: Float
  totalInSurance: Float
  totalWinAmount: Float
}

input PromotionCodeCreateManyBuyPromotionCodeTransactionInput {
  allowed_transaction: Int
  amount: Float!
  code: String!
  createdAt: DateTime
  expiration_date: DateTime!
  id: String
  updatedAt: DateTime
}

input PromotionCodeCreateManyBuyPromotionCodeTransactionInputEnvelope {
  data: [PromotionCodeCreateManyBuyPromotionCodeTransactionInput!]
  skipDuplicates: Boolean
}

input PromotionCodeCreateNestedManyWithoutBuyPromotionCodeTransactionInput {
  connect: [PromotionCodeWhereUniqueInput!]
  connectOrCreate: [PromotionCodeCreateOrConnectWithoutBuyPromotionCodeTransactionInput!]
  create: [PromotionCodeCreateWithoutBuyPromotionCodeTransactionInput!]
  createMany: PromotionCodeCreateManyBuyPromotionCodeTransactionInputEnvelope
}

input PromotionCodeCreateNestedOneWithoutPromotionCodeTransactionInput {
  connect: PromotionCodeWhereUniqueInput
  connectOrCreate: PromotionCodeCreateOrConnectWithoutPromotionCodeTransactionInput
  create: PromotionCodeCreateWithoutPromotionCodeTransactionInput
}

input PromotionCodeCreateOrConnectWithoutBuyPromotionCodeTransactionInput {
  create: PromotionCodeCreateWithoutBuyPromotionCodeTransactionInput!
  where: PromotionCodeWhereUniqueInput!
}

input PromotionCodeCreateOrConnectWithoutPromotionCodeTransactionInput {
  create: PromotionCodeCreateWithoutPromotionCodeTransactionInput!
  where: PromotionCodeWhereUniqueInput!
}

input PromotionCodeCreateWithoutBuyPromotionCodeTransactionInput {
  allowed_transaction: Int
  amount: Float!
  code: String!
  createdAt: DateTime
  expiration_date: DateTime!
  id: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutPromotionCodeInput
  updatedAt: DateTime
}

input PromotionCodeCreateWithoutPromotionCodeTransactionInput {
  allowed_transaction: Int
  amount: Float!
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedOneWithoutPromotionCodeInput
  code: String!
  createdAt: DateTime
  expiration_date: DateTime!
  id: String
  updatedAt: DateTime
}

input PromotionCodeScalarWhereInput {
  allowed_transaction: IntFilter
  amount: FloatFilter
  AND: [PromotionCodeScalarWhereInput!]
  buy_promotion_code_transaction_id: StringNullableFilter
  code: StringFilter
  createdAt: DateTimeFilter
  expiration_date: DateTimeFilter
  id: StringFilter
  NOT: [PromotionCodeScalarWhereInput!]
  OR: [PromotionCodeScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input PromotionCodeTransactionCreateManyPromotionCodeInput {
  createdAt: DateTime
  id: String
  type: PromotionCodeTransactionType!
  updatedAt: DateTime
  user_id: String!
}

input PromotionCodeTransactionCreateManyPromotionCodeInputEnvelope {
  data: [PromotionCodeTransactionCreateManyPromotionCodeInput!]
  skipDuplicates: Boolean
}

input PromotionCodeTransactionCreateManyUserInput {
  createdAt: DateTime
  id: String
  promotion_code_id: String!
  type: PromotionCodeTransactionType!
  updatedAt: DateTime
}

input PromotionCodeTransactionCreateManyUserInputEnvelope {
  data: [PromotionCodeTransactionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input PromotionCodeTransactionCreateNestedManyWithoutPromotionCodeInput {
  connect: [PromotionCodeTransactionWhereUniqueInput!]
  connectOrCreate: [PromotionCodeTransactionCreateOrConnectWithoutPromotionCodeInput!]
  create: [PromotionCodeTransactionCreateWithoutPromotionCodeInput!]
  createMany: PromotionCodeTransactionCreateManyPromotionCodeInputEnvelope
}

input PromotionCodeTransactionCreateNestedManyWithoutUserInput {
  connect: [PromotionCodeTransactionWhereUniqueInput!]
  connectOrCreate: [PromotionCodeTransactionCreateOrConnectWithoutUserInput!]
  create: [PromotionCodeTransactionCreateWithoutUserInput!]
  createMany: PromotionCodeTransactionCreateManyUserInputEnvelope
}

input PromotionCodeTransactionCreateOrConnectWithoutPromotionCodeInput {
  create: PromotionCodeTransactionCreateWithoutPromotionCodeInput!
  where: PromotionCodeTransactionWhereUniqueInput!
}

input PromotionCodeTransactionCreateOrConnectWithoutUserInput {
  create: PromotionCodeTransactionCreateWithoutUserInput!
  where: PromotionCodeTransactionWhereUniqueInput!
}

input PromotionCodeTransactionCreateWithoutPromotionCodeInput {
  createdAt: DateTime
  id: String
  type: PromotionCodeTransactionType!
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutPromotionCodeTransactionInput!
}

input PromotionCodeTransactionCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  PromotionCode: PromotionCodeCreateNestedOneWithoutPromotionCodeTransactionInput!
  type: PromotionCodeTransactionType!
  updatedAt: DateTime
}

input PromotionCodeTransactionScalarWhereInput {
  AND: [PromotionCodeTransactionScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [PromotionCodeTransactionScalarWhereInput!]
  OR: [PromotionCodeTransactionScalarWhereInput!]
  promotion_code_id: StringFilter
  type: EnumPromotionCodeTransactionTypeFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

enum PromotionCodeTransactionType {
  APPLY
  BUY
  REFUND_BUY_EXPIRE
}

input PromotionCodeTransactionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  type: EnumPromotionCodeTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PromotionCodeTransactionUpdateManyWithoutPromotionCodeInput {
  connect: [PromotionCodeTransactionWhereUniqueInput!]
  connectOrCreate: [PromotionCodeTransactionCreateOrConnectWithoutPromotionCodeInput!]
  create: [PromotionCodeTransactionCreateWithoutPromotionCodeInput!]
  createMany: PromotionCodeTransactionCreateManyPromotionCodeInputEnvelope
  delete: [PromotionCodeTransactionWhereUniqueInput!]
  deleteMany: [PromotionCodeTransactionScalarWhereInput!]
  disconnect: [PromotionCodeTransactionWhereUniqueInput!]
  set: [PromotionCodeTransactionWhereUniqueInput!]
  update: [PromotionCodeTransactionUpdateWithWhereUniqueWithoutPromotionCodeInput!]
  updateMany: [PromotionCodeTransactionUpdateManyWithWhereWithoutPromotionCodeInput!]
  upsert: [PromotionCodeTransactionUpsertWithWhereUniqueWithoutPromotionCodeInput!]
}

input PromotionCodeTransactionUpdateManyWithoutUserInput {
  connect: [PromotionCodeTransactionWhereUniqueInput!]
  connectOrCreate: [PromotionCodeTransactionCreateOrConnectWithoutUserInput!]
  create: [PromotionCodeTransactionCreateWithoutUserInput!]
  createMany: PromotionCodeTransactionCreateManyUserInputEnvelope
  delete: [PromotionCodeTransactionWhereUniqueInput!]
  deleteMany: [PromotionCodeTransactionScalarWhereInput!]
  disconnect: [PromotionCodeTransactionWhereUniqueInput!]
  set: [PromotionCodeTransactionWhereUniqueInput!]
  update: [PromotionCodeTransactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PromotionCodeTransactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [PromotionCodeTransactionUpsertWithWhereUniqueWithoutUserInput!]
}

input PromotionCodeTransactionUpdateManyWithWhereWithoutPromotionCodeInput {
  data: PromotionCodeTransactionUpdateManyMutationInput!
  where: PromotionCodeTransactionScalarWhereInput!
}

input PromotionCodeTransactionUpdateManyWithWhereWithoutUserInput {
  data: PromotionCodeTransactionUpdateManyMutationInput!
  where: PromotionCodeTransactionScalarWhereInput!
}

input PromotionCodeTransactionUpdateWithoutPromotionCodeInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  type: EnumPromotionCodeTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutPromotionCodeTransactionInput
}

input PromotionCodeTransactionUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  PromotionCode: PromotionCodeUpdateOneRequiredWithoutPromotionCodeTransactionInput
  type: EnumPromotionCodeTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PromotionCodeTransactionUpdateWithWhereUniqueWithoutPromotionCodeInput {
  data: PromotionCodeTransactionUpdateWithoutPromotionCodeInput!
  where: PromotionCodeTransactionWhereUniqueInput!
}

input PromotionCodeTransactionUpdateWithWhereUniqueWithoutUserInput {
  data: PromotionCodeTransactionUpdateWithoutUserInput!
  where: PromotionCodeTransactionWhereUniqueInput!
}

input PromotionCodeTransactionUpsertWithWhereUniqueWithoutPromotionCodeInput {
  create: PromotionCodeTransactionCreateWithoutPromotionCodeInput!
  update: PromotionCodeTransactionUpdateWithoutPromotionCodeInput!
  where: PromotionCodeTransactionWhereUniqueInput!
}

input PromotionCodeTransactionUpsertWithWhereUniqueWithoutUserInput {
  create: PromotionCodeTransactionCreateWithoutUserInput!
  update: PromotionCodeTransactionUpdateWithoutUserInput!
  where: PromotionCodeTransactionWhereUniqueInput!
}

input PromotionCodeTransactionWhereUniqueInput {
  id: String
}

input PromotionCodeUpdateManyMutationInput {
  allowed_transaction: IntFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiration_date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PromotionCodeUpdateManyWithoutBuyPromotionCodeTransactionInput {
  connect: [PromotionCodeWhereUniqueInput!]
  connectOrCreate: [PromotionCodeCreateOrConnectWithoutBuyPromotionCodeTransactionInput!]
  create: [PromotionCodeCreateWithoutBuyPromotionCodeTransactionInput!]
  createMany: PromotionCodeCreateManyBuyPromotionCodeTransactionInputEnvelope
  delete: [PromotionCodeWhereUniqueInput!]
  deleteMany: [PromotionCodeScalarWhereInput!]
  disconnect: [PromotionCodeWhereUniqueInput!]
  set: [PromotionCodeWhereUniqueInput!]
  update: [PromotionCodeUpdateWithWhereUniqueWithoutBuyPromotionCodeTransactionInput!]
  updateMany: [PromotionCodeUpdateManyWithWhereWithoutBuyPromotionCodeTransactionInput!]
  upsert: [PromotionCodeUpsertWithWhereUniqueWithoutBuyPromotionCodeTransactionInput!]
}

input PromotionCodeUpdateManyWithWhereWithoutBuyPromotionCodeTransactionInput {
  data: PromotionCodeUpdateManyMutationInput!
  where: PromotionCodeScalarWhereInput!
}

input PromotionCodeUpdateOneRequiredWithoutPromotionCodeTransactionInput {
  connect: PromotionCodeWhereUniqueInput
  connectOrCreate: PromotionCodeCreateOrConnectWithoutPromotionCodeTransactionInput
  create: PromotionCodeCreateWithoutPromotionCodeTransactionInput
  update: PromotionCodeUpdateWithoutPromotionCodeTransactionInput
  upsert: PromotionCodeUpsertWithoutPromotionCodeTransactionInput
}

input PromotionCodeUpdateWithoutBuyPromotionCodeTransactionInput {
  allowed_transaction: IntFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiration_date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutPromotionCodeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PromotionCodeUpdateWithoutPromotionCodeTransactionInput {
  allowed_transaction: IntFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateOneWithoutPromotionCodeInput
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiration_date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PromotionCodeUpdateWithWhereUniqueWithoutBuyPromotionCodeTransactionInput {
  data: PromotionCodeUpdateWithoutBuyPromotionCodeTransactionInput!
  where: PromotionCodeWhereUniqueInput!
}

input PromotionCodeUpsertWithoutPromotionCodeTransactionInput {
  create: PromotionCodeCreateWithoutPromotionCodeTransactionInput!
  update: PromotionCodeUpdateWithoutPromotionCodeTransactionInput!
}

input PromotionCodeUpsertWithWhereUniqueWithoutBuyPromotionCodeTransactionInput {
  create: PromotionCodeCreateWithoutBuyPromotionCodeTransactionInput!
  update: PromotionCodeUpdateWithoutBuyPromotionCodeTransactionInput!
  where: PromotionCodeWhereUniqueInput!
}

input PromotionCodeWhereUniqueInput {
  code: String
  id: String
}

input PromotionTransactionCreateManyUserInput {
  amount: Float!
  createdAt: DateTime
  event_id: String!
  event_type: PromotionType!
  id: String
  updatedAt: DateTime
}

input PromotionTransactionCreateManyUserInputEnvelope {
  data: [PromotionTransactionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input PromotionTransactionCreateNestedManyWithoutUserInput {
  connect: [PromotionTransactionWhereUniqueInput!]
  connectOrCreate: [PromotionTransactionCreateOrConnectWithoutUserInput!]
  create: [PromotionTransactionCreateWithoutUserInput!]
  createMany: PromotionTransactionCreateManyUserInputEnvelope
}

input PromotionTransactionCreateOrConnectWithoutUserInput {
  create: PromotionTransactionCreateWithoutUserInput!
  where: PromotionTransactionWhereUniqueInput!
}

input PromotionTransactionCreateWithoutUserInput {
  amount: Float!
  createdAt: DateTime
  event_id: String!
  event_type: PromotionType!
  id: String
  updatedAt: DateTime
}

input PromotionTransactionScalarWhereInput {
  amount: FloatFilter
  AND: [PromotionTransactionScalarWhereInput!]
  createdAt: DateTimeFilter
  event_id: StringFilter
  event_type: EnumPromotionTypeFilter
  id: StringFilter
  NOT: [PromotionTransactionScalarWhereInput!]
  OR: [PromotionTransactionScalarWhereInput!]
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

input PromotionTransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event_id: StringFieldUpdateOperationsInput
  event_type: EnumPromotionTypeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PromotionTransactionUpdateManyWithoutUserInput {
  connect: [PromotionTransactionWhereUniqueInput!]
  connectOrCreate: [PromotionTransactionCreateOrConnectWithoutUserInput!]
  create: [PromotionTransactionCreateWithoutUserInput!]
  createMany: PromotionTransactionCreateManyUserInputEnvelope
  delete: [PromotionTransactionWhereUniqueInput!]
  deleteMany: [PromotionTransactionScalarWhereInput!]
  disconnect: [PromotionTransactionWhereUniqueInput!]
  set: [PromotionTransactionWhereUniqueInput!]
  update: [PromotionTransactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PromotionTransactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [PromotionTransactionUpsertWithWhereUniqueWithoutUserInput!]
}

input PromotionTransactionUpdateManyWithWhereWithoutUserInput {
  data: PromotionTransactionUpdateManyMutationInput!
  where: PromotionTransactionScalarWhereInput!
}

input PromotionTransactionUpdateWithoutUserInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event_id: StringFieldUpdateOperationsInput
  event_type: EnumPromotionTypeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PromotionTransactionUpdateWithWhereUniqueWithoutUserInput {
  data: PromotionTransactionUpdateWithoutUserInput!
  where: PromotionTransactionWhereUniqueInput!
}

input PromotionTransactionUpsertWithWhereUniqueWithoutUserInput {
  create: PromotionTransactionCreateWithoutUserInput!
  update: PromotionTransactionUpdateWithoutUserInput!
  where: PromotionTransactionWhereUniqueInput!
}

input PromotionTransactionWhereUniqueInput {
  id: String
}

enum PromotionType {
  TOURNAMENT
}

type Query {
  ad_check_address(address: String): AdCheckAddress
  ad_checkTransactionHash(currency_id: String, hash: String): HashTransactionInfoPayload
  ad_convertion(direction: ConvertionDirection, limit: Int = 10, skip: Int, user_id: String): ConvertionConnectionPayload
  ad_currency(limit: Int = 10, skip: Int): CurrencyConnectionPayload
  ad_transaction(approved_status: TransactionApproveStatus, currency_id: String, id: String, limit: Int = 10, orderBy: String, search: String, skip: Int = 0, status: TransactionStatus, type: TransactionType, user_id: String, username: String): TransactionPagination
  ad_transfer(limit: Int = 10, skip: Int, status: InternalTransactionStatus, type: InternalTransactionType, user_id: String, username: String): [InternalTransaction]
  ad_wallet(address: String, currency_id: String, limit: Int = 10, search: String, skip: Int, username: String): MainWalletConnectionPayload
  adminConvertionPairs(after: ConvertionPairWhereUniqueInput, before: ConvertionPairWhereUniqueInput, first: Int, last: Int): [AdminConvertionPair!]!
  adminCurrencies(after: CurrencyWhereUniqueInput, before: CurrencyWhereUniqueInput, first: Int, last: Int): [AdminCurrency!]!
  adminRefLevels(after: RefLevelWhereUniqueInput, before: RefLevelWhereUniqueInput, first: Int, last: Int): [RefLevel!]!
  adminRefTree(userId: String!): [AdminRefTreePayload]
  adminUser(user_id: String): User
  adminUserPorfolio(username: String!): UserPorfolio
  adminUsers(limit: Int = 10, skip: Int = 0, username: String): [UserPorfolio]
  adminUsersAggregate(username: String): AdminUsersAggregate
  adNotifications(limit: Int = 10, orderBy: String, search: String, skip: Int = 0): NotificationPagination
  allAvailableCurrency: [Currency]
  coinList: [CoinPayload]
  convertionAggregate: ConvertionAggregate
  convertionSumary(user_id: String): ConvertionSumaries
  countries: [Country]
  currencyConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): CurrencyConnection
  getConvetionPrice(currencySymbolFrom: String!, currencySymbolTo: String!): Float
  mainWalletChange(currency_id: String, event_type: WalletChangeEventType, limit: Int = 10, orderBy: String, search: String, skip: Int = 0, user_id: String!, wallet_id: String): MainWalletChangePagination
  mainWallettransactionAggregate: MainWalletTransactionAggregate
  me: User

  """Fetches an object given its global ID"""
  node(
    """The global ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their global IDs"""
  nodes(
    """The global IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  notificationAggreagte: NotificationAggregate
  notifications(limit: Int = 10, skip: Int): [Notification]
  permissions: [String]
  refChart: RefChartPayload
  refLevels: [RefLevel]
  refNetworkTree(level: Int! = 1): [RefNetworkTreePayload]
  searchUser(username: String!): [User]
  twoFactor: TwoFactor
  unreadNotifyCount: Int
  user(username: String): User
  userCommissions(limit: Int = 10, skip: Int, type: RefTransactionEventType): [RefTransaction]
  userConvertions(limit: Int = 10, skip: Int): [ConvertionTransaction]
  userInternalTransaction(limit: Int, skip: Int, status: InternalTransactionStatus, type: InternalTransactionType): [InternalTransaction]
  userInternalTransactionAggregate: InternalTransactionAggregate
  userMainWalletTransactions(currency_id: String, limit: Int = 10, skip: Int, type: TransactionType): [MainWalletTransaction]
  userSumary(user_id: String): UserSumary
  userWallets(limit: Int = 10, skip: Int): [MainWallet]
  version: String
}

enum QueryMode {
  default
  insensitive
}

type Ref {
  createdAt: DateTime!
  id: String!
  note: Json
  sponsor_id: String!
  updatedAt: DateTime!
  User: User!
  user_id: String!
}

type RefChartPayload {
  agencies: [UserProfile]
  commissions: [RefTransaction]
  refs: [Ref]
}

input RefCreateManySponsorInput {
  createdAt: DateTime
  id: String
  note: NullableJsonNullValueInput
  updatedAt: DateTime
  user_id: String!
}

input RefCreateManySponsorInputEnvelope {
  data: [RefCreateManySponsorInput!]
  skipDuplicates: Boolean
}

input RefCreateNestedManyWithoutSponsorInput {
  connect: [RefWhereUniqueInput!]
  connectOrCreate: [RefCreateOrConnectWithoutSponsorInput!]
  create: [RefCreateWithoutSponsorInput!]
  createMany: RefCreateManySponsorInputEnvelope
}

input RefCreateNestedOneWithoutRefTransactionInput {
  connect: RefWhereUniqueInput
  connectOrCreate: RefCreateOrConnectWithoutRefTransactionInput
  create: RefCreateWithoutRefTransactionInput
}

input RefCreateNestedOneWithoutUserInput {
  connect: RefWhereUniqueInput
  connectOrCreate: RefCreateOrConnectWithoutUserInput
  create: RefCreateWithoutUserInput
}

input RefCreateOrConnectWithoutRefTransactionInput {
  create: RefCreateWithoutRefTransactionInput!
  where: RefWhereUniqueInput!
}

input RefCreateOrConnectWithoutSponsorInput {
  create: RefCreateWithoutSponsorInput!
  where: RefWhereUniqueInput!
}

input RefCreateOrConnectWithoutUserInput {
  create: RefCreateWithoutUserInput!
  where: RefWhereUniqueInput!
}

input RefCreateWithoutRefTransactionInput {
  createdAt: DateTime
  id: String
  note: NullableJsonNullValueInput
  Sponsor: UserCreateNestedOneWithoutSponsorInput!
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutRefInput!
}

input RefCreateWithoutSponsorInput {
  createdAt: DateTime
  id: String
  note: NullableJsonNullValueInput
  RefTransaction: RefTransactionCreateNestedManyWithoutRefInput
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutRefInput!
}

input RefCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  note: NullableJsonNullValueInput
  RefTransaction: RefTransactionCreateNestedManyWithoutRefInput
  Sponsor: UserCreateNestedOneWithoutSponsorInput!
  updatedAt: DateTime
}

type RefLevel {
  agency_com_rate: Float!
  createdAt: DateTime!
  id: String!
  is_enable: Boolean!
  level: Int!
  name: String!
  personalVolume: Float!
  required_agency: Int!
  required_commission: Float!
  required_member: Int!
  trading_com_rate: Float!
  updatedAt: DateTime!
}

input RefLevelCreateNestedOneWithoutRefTransactionInput {
  connect: RefLevelWhereUniqueInput
  connectOrCreate: RefLevelCreateOrConnectWithoutRefTransactionInput
  create: RefLevelCreateWithoutRefTransactionInput
}

input RefLevelCreateOrConnectWithoutRefTransactionInput {
  create: RefLevelCreateWithoutRefTransactionInput!
  where: RefLevelWhereUniqueInput!
}

input RefLevelCreateWithoutRefTransactionInput {
  agency_com_rate: Float!
  createdAt: DateTime
  id: String
  is_enable: Boolean
  level: Int!
  name: String!
  personalVolume: Float
  required_agency: Int!
  required_commission: Float!
  required_member: Int!
  trading_com_rate: Float!
  updatedAt: DateTime
}

input RefLevelUpdateInput {
  agency_com_rate: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  personalVolume: FloatFieldUpdateOperationsInput
  RefTransaction: RefTransactionUpdateManyWithoutRefLevelInput
  required_agency: IntFieldUpdateOperationsInput
  required_commission: FloatFieldUpdateOperationsInput
  required_member: IntFieldUpdateOperationsInput
  trading_com_rate: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefLevelUpdateOneRequiredWithoutRefTransactionInput {
  connect: RefLevelWhereUniqueInput
  connectOrCreate: RefLevelCreateOrConnectWithoutRefTransactionInput
  create: RefLevelCreateWithoutRefTransactionInput
  update: RefLevelUpdateWithoutRefTransactionInput
  upsert: RefLevelUpsertWithoutRefTransactionInput
}

input RefLevelUpdateWithoutRefTransactionInput {
  agency_com_rate: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_enable: BoolFieldUpdateOperationsInput
  level: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  personalVolume: FloatFieldUpdateOperationsInput
  required_agency: IntFieldUpdateOperationsInput
  required_commission: FloatFieldUpdateOperationsInput
  required_member: IntFieldUpdateOperationsInput
  trading_com_rate: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefLevelUpsertWithoutRefTransactionInput {
  create: RefLevelCreateWithoutRefTransactionInput!
  update: RefLevelUpdateWithoutRefTransactionInput!
}

input RefLevelWhereUniqueInput {
  id: String
}

type RefNetworkPayload {
  agencies: Int
  com: Float
  createdAt: String
  downlines: Int
  email: String
  f: Int
  id: Int
  isAgency: Boolean
  sponsor_id: Int
  sponsorUsername: String
  user_id: Int
  username: String
  volume: Float
}

type RefNetworkTreePayload {
  com: Float
  createdAt: String
  f: Int
  id: Int
  isAgency: Boolean
  level: Int
  sponsor_id: Int
  sponsorUsername: String
  user_id: Int
  username: String
}

input RefScalarWhereInput {
  AND: [RefScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [RefScalarWhereInput!]
  note: JsonNullableFilter
  OR: [RefScalarWhereInput!]
  sponsor_id: StringFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

type RefStatsPayload {
  agencyCommision: Float
  currentWeekF1Volume: Float
  f1Agencies: Int
  f1Users: Int
  f1Volume: Float
  sponsor: String
  tmpLevel: Int
  totalAgency: Int
  totalReferal: Int
  tradingCommission: Float
}

type RefTransaction {
  amount: Float
  createdAt: DateTime!
  earned: Float
  event_id: String!
  event_type: RefTransactionEventType!
  id: String!
  rate: Float
  Ref: Ref!
  ref_id: String!
  ref_level_id: String!
  RefLevel: RefLevel!
  updatedAt: DateTime!
  username: String
}

type RefTransactionAggregate {
  count: Int
}

input RefTransactionCreateManyRefInput {
  amount: Float
  createdAt: DateTime
  earned: Float
  event_id: String!
  event_type: RefTransactionEventType!
  id: String
  rate: Float
  ref_level_id: String!
  sponsor_id: String
  updatedAt: DateTime
  user_id: String
}

input RefTransactionCreateManyRefInputEnvelope {
  data: [RefTransactionCreateManyRefInput!]
  skipDuplicates: Boolean
}

input RefTransactionCreateManyRefLevelInput {
  amount: Float
  createdAt: DateTime
  earned: Float
  event_id: String!
  event_type: RefTransactionEventType!
  id: String
  rate: Float
  ref_id: String!
  sponsor_id: String
  updatedAt: DateTime
  user_id: String
}

input RefTransactionCreateManyRefLevelInputEnvelope {
  data: [RefTransactionCreateManyRefLevelInput!]
  skipDuplicates: Boolean
}

input RefTransactionCreateManySponsorInput {
  amount: Float
  createdAt: DateTime
  earned: Float
  event_id: String!
  event_type: RefTransactionEventType!
  id: String
  rate: Float
  ref_id: String!
  ref_level_id: String!
  updatedAt: DateTime
  user_id: String
}

input RefTransactionCreateManySponsorInputEnvelope {
  data: [RefTransactionCreateManySponsorInput!]
  skipDuplicates: Boolean
}

input RefTransactionCreateManyUserInput {
  amount: Float
  createdAt: DateTime
  earned: Float
  event_id: String!
  event_type: RefTransactionEventType!
  id: String
  rate: Float
  ref_id: String!
  ref_level_id: String!
  sponsor_id: String
  updatedAt: DateTime
}

input RefTransactionCreateManyUserInputEnvelope {
  data: [RefTransactionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input RefTransactionCreateNestedManyWithoutRefInput {
  connect: [RefTransactionWhereUniqueInput!]
  connectOrCreate: [RefTransactionCreateOrConnectWithoutRefInput!]
  create: [RefTransactionCreateWithoutRefInput!]
  createMany: RefTransactionCreateManyRefInputEnvelope
}

input RefTransactionCreateNestedManyWithoutSponsorInput {
  connect: [RefTransactionWhereUniqueInput!]
  connectOrCreate: [RefTransactionCreateOrConnectWithoutSponsorInput!]
  create: [RefTransactionCreateWithoutSponsorInput!]
  createMany: RefTransactionCreateManySponsorInputEnvelope
}

input RefTransactionCreateNestedManyWithoutUserInput {
  connect: [RefTransactionWhereUniqueInput!]
  connectOrCreate: [RefTransactionCreateOrConnectWithoutUserInput!]
  create: [RefTransactionCreateWithoutUserInput!]
  createMany: RefTransactionCreateManyUserInputEnvelope
}

input RefTransactionCreateOrConnectWithoutRefInput {
  create: RefTransactionCreateWithoutRefInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionCreateOrConnectWithoutRefLevelInput {
  create: RefTransactionCreateWithoutRefLevelInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionCreateOrConnectWithoutSponsorInput {
  create: RefTransactionCreateWithoutSponsorInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionCreateOrConnectWithoutUserInput {
  create: RefTransactionCreateWithoutUserInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionCreateWithoutRefInput {
  amount: Float
  createdAt: DateTime
  earned: Float
  event_id: String!
  event_type: RefTransactionEventType!
  id: String
  rate: Float
  RefLevel: RefLevelCreateNestedOneWithoutRefTransactionInput!
  Sponsor: UserCreateNestedOneWithoutRefTransactionOfSponsorInput
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutRefTransactionOfUserInput
}

input RefTransactionCreateWithoutRefLevelInput {
  amount: Float
  createdAt: DateTime
  earned: Float
  event_id: String!
  event_type: RefTransactionEventType!
  id: String
  rate: Float
  Ref: RefCreateNestedOneWithoutRefTransactionInput!
  Sponsor: UserCreateNestedOneWithoutRefTransactionOfSponsorInput
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutRefTransactionOfUserInput
}

input RefTransactionCreateWithoutSponsorInput {
  amount: Float
  createdAt: DateTime
  earned: Float
  event_id: String!
  event_type: RefTransactionEventType!
  id: String
  rate: Float
  Ref: RefCreateNestedOneWithoutRefTransactionInput!
  RefLevel: RefLevelCreateNestedOneWithoutRefTransactionInput!
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutRefTransactionOfUserInput
}

input RefTransactionCreateWithoutUserInput {
  amount: Float
  createdAt: DateTime
  earned: Float
  event_id: String!
  event_type: RefTransactionEventType!
  id: String
  rate: Float
  Ref: RefCreateNestedOneWithoutRefTransactionInput!
  RefLevel: RefLevelCreateNestedOneWithoutRefTransactionInput!
  Sponsor: UserCreateNestedOneWithoutRefTransactionOfSponsorInput
  updatedAt: DateTime
}

type RefTransactionCustom {
  agencyF1: Int
  branchVolume: Float
  commission: Float
  level: String
  percentVolume: Float
}

enum RefTransactionEventType {
  AGENCY
  TRADING
}

input RefTransactionScalarWhereInput {
  amount: FloatNullableFilter
  AND: [RefTransactionScalarWhereInput!]
  createdAt: DateTimeFilter
  earned: FloatNullableFilter
  event_id: StringFilter
  event_type: EnumRefTransactionEventTypeFilter
  id: StringFilter
  NOT: [RefTransactionScalarWhereInput!]
  OR: [RefTransactionScalarWhereInput!]
  rate: FloatNullableFilter
  ref_id: StringFilter
  ref_level_id: StringFilter
  sponsor_id: StringNullableFilter
  updatedAt: DateTimeFilter
  user_id: StringNullableFilter
}

input RefTransactionUpdateManyMutationInput {
  amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earned: NullableFloatFieldUpdateOperationsInput
  event_id: StringFieldUpdateOperationsInput
  event_type: EnumRefTransactionEventTypeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rate: NullableFloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefTransactionUpdateManyWithoutRefInput {
  connect: [RefTransactionWhereUniqueInput!]
  connectOrCreate: [RefTransactionCreateOrConnectWithoutRefInput!]
  create: [RefTransactionCreateWithoutRefInput!]
  createMany: RefTransactionCreateManyRefInputEnvelope
  delete: [RefTransactionWhereUniqueInput!]
  deleteMany: [RefTransactionScalarWhereInput!]
  disconnect: [RefTransactionWhereUniqueInput!]
  set: [RefTransactionWhereUniqueInput!]
  update: [RefTransactionUpdateWithWhereUniqueWithoutRefInput!]
  updateMany: [RefTransactionUpdateManyWithWhereWithoutRefInput!]
  upsert: [RefTransactionUpsertWithWhereUniqueWithoutRefInput!]
}

input RefTransactionUpdateManyWithoutRefLevelInput {
  connect: [RefTransactionWhereUniqueInput!]
  connectOrCreate: [RefTransactionCreateOrConnectWithoutRefLevelInput!]
  create: [RefTransactionCreateWithoutRefLevelInput!]
  createMany: RefTransactionCreateManyRefLevelInputEnvelope
  delete: [RefTransactionWhereUniqueInput!]
  deleteMany: [RefTransactionScalarWhereInput!]
  disconnect: [RefTransactionWhereUniqueInput!]
  set: [RefTransactionWhereUniqueInput!]
  update: [RefTransactionUpdateWithWhereUniqueWithoutRefLevelInput!]
  updateMany: [RefTransactionUpdateManyWithWhereWithoutRefLevelInput!]
  upsert: [RefTransactionUpsertWithWhereUniqueWithoutRefLevelInput!]
}

input RefTransactionUpdateManyWithoutSponsorInput {
  connect: [RefTransactionWhereUniqueInput!]
  connectOrCreate: [RefTransactionCreateOrConnectWithoutSponsorInput!]
  create: [RefTransactionCreateWithoutSponsorInput!]
  createMany: RefTransactionCreateManySponsorInputEnvelope
  delete: [RefTransactionWhereUniqueInput!]
  deleteMany: [RefTransactionScalarWhereInput!]
  disconnect: [RefTransactionWhereUniqueInput!]
  set: [RefTransactionWhereUniqueInput!]
  update: [RefTransactionUpdateWithWhereUniqueWithoutSponsorInput!]
  updateMany: [RefTransactionUpdateManyWithWhereWithoutSponsorInput!]
  upsert: [RefTransactionUpsertWithWhereUniqueWithoutSponsorInput!]
}

input RefTransactionUpdateManyWithoutUserInput {
  connect: [RefTransactionWhereUniqueInput!]
  connectOrCreate: [RefTransactionCreateOrConnectWithoutUserInput!]
  create: [RefTransactionCreateWithoutUserInput!]
  createMany: RefTransactionCreateManyUserInputEnvelope
  delete: [RefTransactionWhereUniqueInput!]
  deleteMany: [RefTransactionScalarWhereInput!]
  disconnect: [RefTransactionWhereUniqueInput!]
  set: [RefTransactionWhereUniqueInput!]
  update: [RefTransactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [RefTransactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [RefTransactionUpsertWithWhereUniqueWithoutUserInput!]
}

input RefTransactionUpdateManyWithWhereWithoutRefInput {
  data: RefTransactionUpdateManyMutationInput!
  where: RefTransactionScalarWhereInput!
}

input RefTransactionUpdateManyWithWhereWithoutRefLevelInput {
  data: RefTransactionUpdateManyMutationInput!
  where: RefTransactionScalarWhereInput!
}

input RefTransactionUpdateManyWithWhereWithoutSponsorInput {
  data: RefTransactionUpdateManyMutationInput!
  where: RefTransactionScalarWhereInput!
}

input RefTransactionUpdateManyWithWhereWithoutUserInput {
  data: RefTransactionUpdateManyMutationInput!
  where: RefTransactionScalarWhereInput!
}

input RefTransactionUpdateWithoutRefInput {
  amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earned: NullableFloatFieldUpdateOperationsInput
  event_id: StringFieldUpdateOperationsInput
  event_type: EnumRefTransactionEventTypeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rate: NullableFloatFieldUpdateOperationsInput
  RefLevel: RefLevelUpdateOneRequiredWithoutRefTransactionInput
  Sponsor: UserUpdateOneWithoutRefTransactionOfSponsorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneWithoutRefTransactionOfUserInput
}

input RefTransactionUpdateWithoutRefLevelInput {
  amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earned: NullableFloatFieldUpdateOperationsInput
  event_id: StringFieldUpdateOperationsInput
  event_type: EnumRefTransactionEventTypeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rate: NullableFloatFieldUpdateOperationsInput
  Ref: RefUpdateOneRequiredWithoutRefTransactionInput
  Sponsor: UserUpdateOneWithoutRefTransactionOfSponsorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneWithoutRefTransactionOfUserInput
}

input RefTransactionUpdateWithoutSponsorInput {
  amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earned: NullableFloatFieldUpdateOperationsInput
  event_id: StringFieldUpdateOperationsInput
  event_type: EnumRefTransactionEventTypeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rate: NullableFloatFieldUpdateOperationsInput
  Ref: RefUpdateOneRequiredWithoutRefTransactionInput
  RefLevel: RefLevelUpdateOneRequiredWithoutRefTransactionInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneWithoutRefTransactionOfUserInput
}

input RefTransactionUpdateWithoutUserInput {
  amount: NullableFloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  earned: NullableFloatFieldUpdateOperationsInput
  event_id: StringFieldUpdateOperationsInput
  event_type: EnumRefTransactionEventTypeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rate: NullableFloatFieldUpdateOperationsInput
  Ref: RefUpdateOneRequiredWithoutRefTransactionInput
  RefLevel: RefLevelUpdateOneRequiredWithoutRefTransactionInput
  Sponsor: UserUpdateOneWithoutRefTransactionOfSponsorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefTransactionUpdateWithWhereUniqueWithoutRefInput {
  data: RefTransactionUpdateWithoutRefInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionUpdateWithWhereUniqueWithoutRefLevelInput {
  data: RefTransactionUpdateWithoutRefLevelInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionUpdateWithWhereUniqueWithoutSponsorInput {
  data: RefTransactionUpdateWithoutSponsorInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionUpdateWithWhereUniqueWithoutUserInput {
  data: RefTransactionUpdateWithoutUserInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionUpsertWithWhereUniqueWithoutRefInput {
  create: RefTransactionCreateWithoutRefInput!
  update: RefTransactionUpdateWithoutRefInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionUpsertWithWhereUniqueWithoutRefLevelInput {
  create: RefTransactionCreateWithoutRefLevelInput!
  update: RefTransactionUpdateWithoutRefLevelInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionUpsertWithWhereUniqueWithoutSponsorInput {
  create: RefTransactionCreateWithoutSponsorInput!
  update: RefTransactionUpdateWithoutSponsorInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionUpsertWithWhereUniqueWithoutUserInput {
  create: RefTransactionCreateWithoutUserInput!
  update: RefTransactionUpdateWithoutUserInput!
  where: RefTransactionWhereUniqueInput!
}

input RefTransactionWhereUniqueInput {
  id: String
}

type RefundSubscriptionPayload {
  amount: Float
}

input RefundTransactionCreateManyUserInput {
  amount: Float!
  createdAt: DateTime
  extra_data: NullableJsonNullValueInput
  id: String
  updatedAt: DateTime
}

input RefundTransactionCreateManyUserInputEnvelope {
  data: [RefundTransactionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input RefundTransactionCreateNestedManyWithoutUserInput {
  connect: [RefundTransactionWhereUniqueInput!]
  connectOrCreate: [RefundTransactionCreateOrConnectWithoutUserInput!]
  create: [RefundTransactionCreateWithoutUserInput!]
  createMany: RefundTransactionCreateManyUserInputEnvelope
}

input RefundTransactionCreateOrConnectWithoutUserInput {
  create: RefundTransactionCreateWithoutUserInput!
  where: RefundTransactionWhereUniqueInput!
}

input RefundTransactionCreateWithoutUserInput {
  amount: Float!
  createdAt: DateTime
  extra_data: NullableJsonNullValueInput
  id: String
  updatedAt: DateTime
}

input RefundTransactionScalarWhereInput {
  amount: FloatFilter
  AND: [RefundTransactionScalarWhereInput!]
  createdAt: DateTimeFilter
  extra_data: JsonNullableFilter
  id: StringFilter
  NOT: [RefundTransactionScalarWhereInput!]
  OR: [RefundTransactionScalarWhereInput!]
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

input RefundTransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  extra_data: NullableJsonNullValueInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefundTransactionUpdateManyWithoutUserInput {
  connect: [RefundTransactionWhereUniqueInput!]
  connectOrCreate: [RefundTransactionCreateOrConnectWithoutUserInput!]
  create: [RefundTransactionCreateWithoutUserInput!]
  createMany: RefundTransactionCreateManyUserInputEnvelope
  delete: [RefundTransactionWhereUniqueInput!]
  deleteMany: [RefundTransactionScalarWhereInput!]
  disconnect: [RefundTransactionWhereUniqueInput!]
  set: [RefundTransactionWhereUniqueInput!]
  update: [RefundTransactionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [RefundTransactionUpdateManyWithWhereWithoutUserInput!]
  upsert: [RefundTransactionUpsertWithWhereUniqueWithoutUserInput!]
}

input RefundTransactionUpdateManyWithWhereWithoutUserInput {
  data: RefundTransactionUpdateManyMutationInput!
  where: RefundTransactionScalarWhereInput!
}

input RefundTransactionUpdateWithoutUserInput {
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  extra_data: NullableJsonNullValueInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefundTransactionUpdateWithWhereUniqueWithoutUserInput {
  data: RefundTransactionUpdateWithoutUserInput!
  where: RefundTransactionWhereUniqueInput!
}

input RefundTransactionUpsertWithWhereUniqueWithoutUserInput {
  create: RefundTransactionCreateWithoutUserInput!
  update: RefundTransactionUpdateWithoutUserInput!
  where: RefundTransactionWhereUniqueInput!
}

input RefundTransactionWhereUniqueInput {
  id: String
}

input RefUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  note: NullableJsonNullValueInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefUpdateManyWithoutSponsorInput {
  connect: [RefWhereUniqueInput!]
  connectOrCreate: [RefCreateOrConnectWithoutSponsorInput!]
  create: [RefCreateWithoutSponsorInput!]
  createMany: RefCreateManySponsorInputEnvelope
  delete: [RefWhereUniqueInput!]
  deleteMany: [RefScalarWhereInput!]
  disconnect: [RefWhereUniqueInput!]
  set: [RefWhereUniqueInput!]
  update: [RefUpdateWithWhereUniqueWithoutSponsorInput!]
  updateMany: [RefUpdateManyWithWhereWithoutSponsorInput!]
  upsert: [RefUpsertWithWhereUniqueWithoutSponsorInput!]
}

input RefUpdateManyWithWhereWithoutSponsorInput {
  data: RefUpdateManyMutationInput!
  where: RefScalarWhereInput!
}

input RefUpdateOneRequiredWithoutRefTransactionInput {
  connect: RefWhereUniqueInput
  connectOrCreate: RefCreateOrConnectWithoutRefTransactionInput
  create: RefCreateWithoutRefTransactionInput
  update: RefUpdateWithoutRefTransactionInput
  upsert: RefUpsertWithoutRefTransactionInput
}

input RefUpdateOneWithoutUserInput {
  connect: RefWhereUniqueInput
  connectOrCreate: RefCreateOrConnectWithoutUserInput
  create: RefCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: RefUpdateWithoutUserInput
  upsert: RefUpsertWithoutUserInput
}

input RefUpdateWithoutRefTransactionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  note: NullableJsonNullValueInput
  Sponsor: UserUpdateOneRequiredWithoutSponsorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutRefInput
}

input RefUpdateWithoutSponsorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  note: NullableJsonNullValueInput
  RefTransaction: RefTransactionUpdateManyWithoutRefInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutRefInput
}

input RefUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  note: NullableJsonNullValueInput
  RefTransaction: RefTransactionUpdateManyWithoutRefInput
  Sponsor: UserUpdateOneRequiredWithoutSponsorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefUpdateWithWhereUniqueWithoutSponsorInput {
  data: RefUpdateWithoutSponsorInput!
  where: RefWhereUniqueInput!
}

input RefUpsertWithoutRefTransactionInput {
  create: RefCreateWithoutRefTransactionInput!
  update: RefUpdateWithoutRefTransactionInput!
}

input RefUpsertWithoutUserInput {
  create: RefCreateWithoutUserInput!
  update: RefUpdateWithoutUserInput!
}

input RefUpsertWithWhereUniqueWithoutSponsorInput {
  create: RefCreateWithoutSponsorInput!
  update: RefUpdateWithoutSponsorInput!
  where: RefWhereUniqueInput!
}

input RefWhereUniqueInput {
  id: String
  user_id: String
}

input ReplyCreateManyTicketInput {
  content: String!
  createdAt: DateTime
  files: NullableJsonNullValueInput
  id: String
  updatedAt: DateTime
  user_id: String!
}

input ReplyCreateManyTicketInputEnvelope {
  data: [ReplyCreateManyTicketInput!]
  skipDuplicates: Boolean
}

input ReplyCreateManyUserInput {
  content: String!
  createdAt: DateTime
  files: NullableJsonNullValueInput
  id: String
  ticket_id: String!
  updatedAt: DateTime
}

input ReplyCreateManyUserInputEnvelope {
  data: [ReplyCreateManyUserInput!]
  skipDuplicates: Boolean
}

input ReplyCreateNestedManyWithoutTicketInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutTicketInput!]
  create: [ReplyCreateWithoutTicketInput!]
  createMany: ReplyCreateManyTicketInputEnvelope
}

input ReplyCreateNestedManyWithoutUserInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutUserInput!]
  create: [ReplyCreateWithoutUserInput!]
  createMany: ReplyCreateManyUserInputEnvelope
}

input ReplyCreateOrConnectWithoutTicketInput {
  create: ReplyCreateWithoutTicketInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateOrConnectWithoutUserInput {
  create: ReplyCreateWithoutUserInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateWithoutTicketInput {
  content: String!
  createdAt: DateTime
  files: NullableJsonNullValueInput
  id: String
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutReplyInput!
}

input ReplyCreateWithoutUserInput {
  content: String!
  createdAt: DateTime
  files: NullableJsonNullValueInput
  id: String
  Ticket: TicketCreateNestedOneWithoutReplyInput!
  updatedAt: DateTime
}

input ReplyScalarWhereInput {
  AND: [ReplyScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  files: JsonNullableFilter
  id: StringFilter
  NOT: [ReplyScalarWhereInput!]
  OR: [ReplyScalarWhereInput!]
  ticket_id: StringFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

input ReplyUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  files: NullableJsonNullValueInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReplyUpdateManyWithoutTicketInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutTicketInput!]
  create: [ReplyCreateWithoutTicketInput!]
  createMany: ReplyCreateManyTicketInputEnvelope
  delete: [ReplyWhereUniqueInput!]
  deleteMany: [ReplyScalarWhereInput!]
  disconnect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutTicketInput!]
  updateMany: [ReplyUpdateManyWithWhereWithoutTicketInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutTicketInput!]
}

input ReplyUpdateManyWithoutUserInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutUserInput!]
  create: [ReplyCreateWithoutUserInput!]
  createMany: ReplyCreateManyUserInputEnvelope
  delete: [ReplyWhereUniqueInput!]
  deleteMany: [ReplyScalarWhereInput!]
  disconnect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReplyUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutUserInput!]
}

input ReplyUpdateManyWithWhereWithoutTicketInput {
  data: ReplyUpdateManyMutationInput!
  where: ReplyScalarWhereInput!
}

input ReplyUpdateManyWithWhereWithoutUserInput {
  data: ReplyUpdateManyMutationInput!
  where: ReplyScalarWhereInput!
}

input ReplyUpdateWithoutTicketInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  files: NullableJsonNullValueInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutReplyInput
}

input ReplyUpdateWithoutUserInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  files: NullableJsonNullValueInput
  id: StringFieldUpdateOperationsInput
  Ticket: TicketUpdateOneRequiredWithoutReplyInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReplyUpdateWithWhereUniqueWithoutTicketInput {
  data: ReplyUpdateWithoutTicketInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpdateWithWhereUniqueWithoutUserInput {
  data: ReplyUpdateWithoutUserInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpsertWithWhereUniqueWithoutTicketInput {
  create: ReplyCreateWithoutTicketInput!
  update: ReplyUpdateWithoutTicketInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpsertWithWhereUniqueWithoutUserInput {
  create: ReplyCreateWithoutUserInput!
  update: ReplyUpdateWithoutUserInput!
  where: ReplyWhereUniqueInput!
}

input ReplyWhereUniqueInput {
  id: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  adminPoolInfo: PoolInfo
  battleGiftCode: String
  battleRoundNumber: Int
  candleStick: Foo
  clock: ClockSubscriptionPayload
  newNotify: Notification
  refundSubscription: RefundSubscriptionPayload
  userOpinion: Int
}

type TemporaryToken {
  token: String
}

input TicketCategoryCreateNestedOneWithoutTicketInput {
  connect: TicketCategoryWhereUniqueInput
  connectOrCreate: TicketCategoryCreateOrConnectWithoutTicketInput
  create: TicketCategoryCreateWithoutTicketInput
}

input TicketCategoryCreateOrConnectWithoutTicketInput {
  create: TicketCategoryCreateWithoutTicketInput!
  where: TicketCategoryWhereUniqueInput!
}

input TicketCategoryCreateWithoutTicketInput {
  createdAt: DateTime
  description: String
  id: String
  slug: String!
  title: String!
  updatedAt: DateTime
}

input TicketCategoryUpdateOneRequiredWithoutTicketInput {
  connect: TicketCategoryWhereUniqueInput
  connectOrCreate: TicketCategoryCreateOrConnectWithoutTicketInput
  create: TicketCategoryCreateWithoutTicketInput
  update: TicketCategoryUpdateWithoutTicketInput
  upsert: TicketCategoryUpsertWithoutTicketInput
}

input TicketCategoryUpdateWithoutTicketInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TicketCategoryUpsertWithoutTicketInput {
  create: TicketCategoryCreateWithoutTicketInput!
  update: TicketCategoryUpdateWithoutTicketInput!
}

input TicketCategoryWhereUniqueInput {
  id: String
  slug: String
}

input TicketCreateManyUserInput {
  assigned: String
  category_id: String!
  content: String!
  createdAt: DateTime
  files: NullableJsonNullValueInput
  id: String
  note: String
  priority: TicketPRIORITY
  status: TicketStatus
  title: String!
  updatedAt: DateTime
}

input TicketCreateManyUserInputEnvelope {
  data: [TicketCreateManyUserInput!]
  skipDuplicates: Boolean
}

input TicketCreateNestedManyWithoutUserInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutUserInput!]
  create: [TicketCreateWithoutUserInput!]
  createMany: TicketCreateManyUserInputEnvelope
}

input TicketCreateNestedOneWithoutReplyInput {
  connect: TicketWhereUniqueInput
  connectOrCreate: TicketCreateOrConnectWithoutReplyInput
  create: TicketCreateWithoutReplyInput
}

input TicketCreateOrConnectWithoutReplyInput {
  create: TicketCreateWithoutReplyInput!
  where: TicketWhereUniqueInput!
}

input TicketCreateOrConnectWithoutUserInput {
  create: TicketCreateWithoutUserInput!
  where: TicketWhereUniqueInput!
}

input TicketCreateWithoutReplyInput {
  assigned: String
  Category: TicketCategoryCreateNestedOneWithoutTicketInput!
  content: String!
  createdAt: DateTime
  files: NullableJsonNullValueInput
  id: String
  note: String
  priority: TicketPRIORITY
  status: TicketStatus
  title: String!
  updatedAt: DateTime
  User: UserCreateNestedOneWithoutTicketInput!
}

input TicketCreateWithoutUserInput {
  assigned: String
  Category: TicketCategoryCreateNestedOneWithoutTicketInput!
  content: String!
  createdAt: DateTime
  files: NullableJsonNullValueInput
  id: String
  note: String
  priority: TicketPRIORITY
  Reply: ReplyCreateNestedManyWithoutTicketInput
  status: TicketStatus
  title: String!
  updatedAt: DateTime
}

enum TicketPRIORITY {
  HIGH
  LOW
  NORMAL
}

input TicketScalarWhereInput {
  AND: [TicketScalarWhereInput!]
  assigned: StringNullableFilter
  category_id: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  files: JsonNullableFilter
  id: StringFilter
  NOT: [TicketScalarWhereInput!]
  note: StringNullableFilter
  OR: [TicketScalarWhereInput!]
  priority: EnumTicketPRIORITYFilter
  status: EnumTicketStatusFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

enum TicketStatus {
  CLOSED
  OPEN
  PENDING
  SOLVED
}

input TicketUpdateManyMutationInput {
  assigned: NullableStringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  files: NullableJsonNullValueInput
  id: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  priority: EnumTicketPRIORITYFieldUpdateOperationsInput
  status: EnumTicketStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TicketUpdateManyWithoutUserInput {
  connect: [TicketWhereUniqueInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutUserInput!]
  create: [TicketCreateWithoutUserInput!]
  createMany: TicketCreateManyUserInputEnvelope
  delete: [TicketWhereUniqueInput!]
  deleteMany: [TicketScalarWhereInput!]
  disconnect: [TicketWhereUniqueInput!]
  set: [TicketWhereUniqueInput!]
  update: [TicketUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TicketUpdateManyWithWhereWithoutUserInput!]
  upsert: [TicketUpsertWithWhereUniqueWithoutUserInput!]
}

input TicketUpdateManyWithWhereWithoutUserInput {
  data: TicketUpdateManyMutationInput!
  where: TicketScalarWhereInput!
}

input TicketUpdateOneRequiredWithoutReplyInput {
  connect: TicketWhereUniqueInput
  connectOrCreate: TicketCreateOrConnectWithoutReplyInput
  create: TicketCreateWithoutReplyInput
  update: TicketUpdateWithoutReplyInput
  upsert: TicketUpsertWithoutReplyInput
}

input TicketUpdateWithoutReplyInput {
  assigned: NullableStringFieldUpdateOperationsInput
  Category: TicketCategoryUpdateOneRequiredWithoutTicketInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  files: NullableJsonNullValueInput
  id: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  priority: EnumTicketPRIORITYFieldUpdateOperationsInput
  status: EnumTicketStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutTicketInput
}

input TicketUpdateWithoutUserInput {
  assigned: NullableStringFieldUpdateOperationsInput
  Category: TicketCategoryUpdateOneRequiredWithoutTicketInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  files: NullableJsonNullValueInput
  id: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  priority: EnumTicketPRIORITYFieldUpdateOperationsInput
  Reply: ReplyUpdateManyWithoutTicketInput
  status: EnumTicketStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TicketUpdateWithWhereUniqueWithoutUserInput {
  data: TicketUpdateWithoutUserInput!
  where: TicketWhereUniqueInput!
}

input TicketUpsertWithoutReplyInput {
  create: TicketCreateWithoutReplyInput!
  update: TicketUpdateWithoutReplyInput!
}

input TicketUpsertWithWhereUniqueWithoutUserInput {
  create: TicketCreateWithoutUserInput!
  update: TicketUpdateWithoutUserInput!
  where: TicketWhereUniqueInput!
}

input TicketWhereUniqueInput {
  id: String
}

type TokenLogin {
  token: String
}

enum TransactionApproveStatus {
  APPROVED
  REJECTED
}

type TransactionDetail {
  exchange: ExchangeWalletSumary
  transaction: MainWalletTransaction
  wallet: WalletSumary
}

input TransactionMasterCreateManyCurrencyInput {
  address: String
  amount: Float!
  createdAt: DateTime
  id: String
  main_wallet_id: String
  master_address: String
  tx_hash: String
  tx_type: MasterTransactionType!
  updatedAt: DateTime
}

input TransactionMasterCreateManyCurrencyInputEnvelope {
  data: [TransactionMasterCreateManyCurrencyInput!]
  skipDuplicates: Boolean
}

input TransactionMasterCreateManyMainWalletAddressInput {
  address: String
  amount: Float!
  createdAt: DateTime
  currency_id: String!
  id: String
  master_address: String
  tx_hash: String
  tx_type: MasterTransactionType!
  updatedAt: DateTime
}

input TransactionMasterCreateManyMainWalletAddressInputEnvelope {
  data: [TransactionMasterCreateManyMainWalletAddressInput!]
  skipDuplicates: Boolean
}

input TransactionMasterCreateNestedManyWithoutCurrencyInput {
  connect: [TransactionMasterWhereUniqueInput!]
  connectOrCreate: [TransactionMasterCreateOrConnectWithoutCurrencyInput!]
  create: [TransactionMasterCreateWithoutCurrencyInput!]
  createMany: TransactionMasterCreateManyCurrencyInputEnvelope
}

input TransactionMasterCreateNestedManyWithoutMainWalletAddressInput {
  connect: [TransactionMasterWhereUniqueInput!]
  connectOrCreate: [TransactionMasterCreateOrConnectWithoutMainWalletAddressInput!]
  create: [TransactionMasterCreateWithoutMainWalletAddressInput!]
  createMany: TransactionMasterCreateManyMainWalletAddressInputEnvelope
}

input TransactionMasterCreateOrConnectWithoutCurrencyInput {
  create: TransactionMasterCreateWithoutCurrencyInput!
  where: TransactionMasterWhereUniqueInput!
}

input TransactionMasterCreateOrConnectWithoutMainWalletAddressInput {
  create: TransactionMasterCreateWithoutMainWalletAddressInput!
  where: TransactionMasterWhereUniqueInput!
}

input TransactionMasterCreateWithoutCurrencyInput {
  address: String
  amount: Float!
  createdAt: DateTime
  id: String
  MainWalletAddress: MainWalletAddressCreateNestedOneWithoutTransactionMasterInput
  master_address: String
  tx_hash: String
  tx_type: MasterTransactionType!
  updatedAt: DateTime
}

input TransactionMasterCreateWithoutMainWalletAddressInput {
  address: String
  amount: Float!
  createdAt: DateTime
  Currency: CurrencyCreateNestedOneWithoutTransactionMasterInput!
  id: String
  master_address: String
  tx_hash: String
  tx_type: MasterTransactionType!
  updatedAt: DateTime
}

input TransactionMasterScalarWhereInput {
  address: StringNullableFilter
  amount: FloatFilter
  AND: [TransactionMasterScalarWhereInput!]
  createdAt: DateTimeFilter
  currency_id: StringFilter
  id: StringFilter
  main_wallet_id: StringNullableFilter
  master_address: StringNullableFilter
  NOT: [TransactionMasterScalarWhereInput!]
  OR: [TransactionMasterScalarWhereInput!]
  tx_hash: StringNullableFilter
  tx_type: EnumMasterTransactionTypeFilter
  updatedAt: DateTimeFilter
}

input TransactionMasterUpdateManyMutationInput {
  address: NullableStringFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  master_address: NullableStringFieldUpdateOperationsInput
  tx_hash: NullableStringFieldUpdateOperationsInput
  tx_type: EnumMasterTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionMasterUpdateManyWithoutCurrencyInput {
  connect: [TransactionMasterWhereUniqueInput!]
  connectOrCreate: [TransactionMasterCreateOrConnectWithoutCurrencyInput!]
  create: [TransactionMasterCreateWithoutCurrencyInput!]
  createMany: TransactionMasterCreateManyCurrencyInputEnvelope
  delete: [TransactionMasterWhereUniqueInput!]
  deleteMany: [TransactionMasterScalarWhereInput!]
  disconnect: [TransactionMasterWhereUniqueInput!]
  set: [TransactionMasterWhereUniqueInput!]
  update: [TransactionMasterUpdateWithWhereUniqueWithoutCurrencyInput!]
  updateMany: [TransactionMasterUpdateManyWithWhereWithoutCurrencyInput!]
  upsert: [TransactionMasterUpsertWithWhereUniqueWithoutCurrencyInput!]
}

input TransactionMasterUpdateManyWithoutMainWalletAddressInput {
  connect: [TransactionMasterWhereUniqueInput!]
  connectOrCreate: [TransactionMasterCreateOrConnectWithoutMainWalletAddressInput!]
  create: [TransactionMasterCreateWithoutMainWalletAddressInput!]
  createMany: TransactionMasterCreateManyMainWalletAddressInputEnvelope
  delete: [TransactionMasterWhereUniqueInput!]
  deleteMany: [TransactionMasterScalarWhereInput!]
  disconnect: [TransactionMasterWhereUniqueInput!]
  set: [TransactionMasterWhereUniqueInput!]
  update: [TransactionMasterUpdateWithWhereUniqueWithoutMainWalletAddressInput!]
  updateMany: [TransactionMasterUpdateManyWithWhereWithoutMainWalletAddressInput!]
  upsert: [TransactionMasterUpsertWithWhereUniqueWithoutMainWalletAddressInput!]
}

input TransactionMasterUpdateManyWithWhereWithoutCurrencyInput {
  data: TransactionMasterUpdateManyMutationInput!
  where: TransactionMasterScalarWhereInput!
}

input TransactionMasterUpdateManyWithWhereWithoutMainWalletAddressInput {
  data: TransactionMasterUpdateManyMutationInput!
  where: TransactionMasterScalarWhereInput!
}

input TransactionMasterUpdateWithoutCurrencyInput {
  address: NullableStringFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  MainWalletAddress: MainWalletAddressUpdateOneWithoutTransactionMasterInput
  master_address: NullableStringFieldUpdateOperationsInput
  tx_hash: NullableStringFieldUpdateOperationsInput
  tx_type: EnumMasterTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionMasterUpdateWithoutMainWalletAddressInput {
  address: NullableStringFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Currency: CurrencyUpdateOneRequiredWithoutTransactionMasterInput
  id: StringFieldUpdateOperationsInput
  master_address: NullableStringFieldUpdateOperationsInput
  tx_hash: NullableStringFieldUpdateOperationsInput
  tx_type: EnumMasterTransactionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionMasterUpdateWithWhereUniqueWithoutCurrencyInput {
  data: TransactionMasterUpdateWithoutCurrencyInput!
  where: TransactionMasterWhereUniqueInput!
}

input TransactionMasterUpdateWithWhereUniqueWithoutMainWalletAddressInput {
  data: TransactionMasterUpdateWithoutMainWalletAddressInput!
  where: TransactionMasterWhereUniqueInput!
}

input TransactionMasterUpsertWithWhereUniqueWithoutCurrencyInput {
  create: TransactionMasterCreateWithoutCurrencyInput!
  update: TransactionMasterUpdateWithoutCurrencyInput!
  where: TransactionMasterWhereUniqueInput!
}

input TransactionMasterUpsertWithWhereUniqueWithoutMainWalletAddressInput {
  create: TransactionMasterCreateWithoutMainWalletAddressInput!
  update: TransactionMasterUpdateWithoutMainWalletAddressInput!
  where: TransactionMasterWhereUniqueInput!
}

input TransactionMasterWhereUniqueInput {
  id: String
}

type TransactionPagination {
  nodes: [MainWalletTransaction]
  total: Int
}

enum TransactionStatus {
  FAILED
  PENDING
  SUCCEED
}

enum TransactionType {
  DEPOSIT
  MANUAL
  RECEIVE
  SEND
  WITHDRAW
}

type TwoFactor {
  backupCodes: [String]
  otpAuthUrl: String
  secret: String
  status: String
}

input TwoFactorCreateManyUserInput {
  backup_codes: NullableJsonNullValueInput
  createdAt: DateTime
  hotp_counter: Int
  id: String
  secret: String!
  status: TwoFactorStatus
  updatedAt: DateTime
}

input TwoFactorCreateManyUserInputEnvelope {
  data: [TwoFactorCreateManyUserInput!]
  skipDuplicates: Boolean
}

input TwoFactorCreateNestedManyWithoutUserInput {
  connect: [TwoFactorWhereUniqueInput!]
  connectOrCreate: [TwoFactorCreateOrConnectWithoutUserInput!]
  create: [TwoFactorCreateWithoutUserInput!]
  createMany: TwoFactorCreateManyUserInputEnvelope
}

input TwoFactorCreateOrConnectWithoutUserInput {
  create: TwoFactorCreateWithoutUserInput!
  where: TwoFactorWhereUniqueInput!
}

input TwoFactorCreateWithoutUserInput {
  backup_codes: NullableJsonNullValueInput
  createdAt: DateTime
  hotp_counter: Int
  id: String
  secret: String!
  status: TwoFactorStatus
  updatedAt: DateTime
}

input TwoFactorScalarWhereInput {
  AND: [TwoFactorScalarWhereInput!]
  backup_codes: JsonNullableFilter
  createdAt: DateTimeFilter
  hotp_counter: IntFilter
  id: StringFilter
  NOT: [TwoFactorScalarWhereInput!]
  OR: [TwoFactorScalarWhereInput!]
  secret: StringFilter
  status: EnumTwoFactorStatusFilter
  updatedAt: DateTimeFilter
  user_id: StringFilter
}

enum TwoFactorStatus {
  DISABLED
  PENDING
  VERIFIED
}

input TwoFactorUpdateManyMutationInput {
  backup_codes: NullableJsonNullValueInput
  createdAt: DateTimeFieldUpdateOperationsInput
  hotp_counter: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  secret: StringFieldUpdateOperationsInput
  status: EnumTwoFactorStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TwoFactorUpdateManyWithoutUserInput {
  connect: [TwoFactorWhereUniqueInput!]
  connectOrCreate: [TwoFactorCreateOrConnectWithoutUserInput!]
  create: [TwoFactorCreateWithoutUserInput!]
  createMany: TwoFactorCreateManyUserInputEnvelope
  delete: [TwoFactorWhereUniqueInput!]
  deleteMany: [TwoFactorScalarWhereInput!]
  disconnect: [TwoFactorWhereUniqueInput!]
  set: [TwoFactorWhereUniqueInput!]
  update: [TwoFactorUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TwoFactorUpdateManyWithWhereWithoutUserInput!]
  upsert: [TwoFactorUpsertWithWhereUniqueWithoutUserInput!]
}

input TwoFactorUpdateManyWithWhereWithoutUserInput {
  data: TwoFactorUpdateManyMutationInput!
  where: TwoFactorScalarWhereInput!
}

input TwoFactorUpdateWithoutUserInput {
  backup_codes: NullableJsonNullValueInput
  createdAt: DateTimeFieldUpdateOperationsInput
  hotp_counter: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  secret: StringFieldUpdateOperationsInput
  status: EnumTwoFactorStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TwoFactorUpdateWithWhereUniqueWithoutUserInput {
  data: TwoFactorUpdateWithoutUserInput!
  where: TwoFactorWhereUniqueInput!
}

input TwoFactorUpsertWithWhereUniqueWithoutUserInput {
  create: TwoFactorCreateWithoutUserInput!
  update: TwoFactorUpdateWithoutUserInput!
  where: TwoFactorWhereUniqueInput!
}

input TwoFactorWhereUniqueInput {
  id: String
  secret: String
  user_id: String
}

"""desc"""
scalar Upload

type UploadFile {
  filename: String
  uri: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: String!
  ip: String
  name: String
  permissions: [Permission!]!
  Ref: Ref
  role: UserRole!
  username: String
  UserProfile: UserProfile
}

input UserCreateNestedOneWithoutBuyPromotionCodeTransactionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBuyPromotionCodeTransactionInput
  create: UserCreateWithoutBuyPromotionCodeTransactionInput
}

input UserCreateNestedOneWithoutConvertionTransactionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutConvertionTransactionInput
  create: UserCreateWithoutConvertionTransactionInput
}

input UserCreateNestedOneWithoutMainWalletInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMainWalletInput
  create: UserCreateWithoutMainWalletInput
}

input UserCreateNestedOneWithoutMainWalletTransactionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMainWalletTransactionInput
  create: UserCreateWithoutMainWalletTransactionInput
}

input UserCreateNestedOneWithoutPromotionCodeTransactionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPromotionCodeTransactionInput
  create: UserCreateWithoutPromotionCodeTransactionInput
}

input UserCreateNestedOneWithoutRefInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRefInput
  create: UserCreateWithoutRefInput
}

input UserCreateNestedOneWithoutRefTransactionOfSponsorInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRefTransactionOfSponsorInput
  create: UserCreateWithoutRefTransactionOfSponsorInput
}

input UserCreateNestedOneWithoutRefTransactionOfUserInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRefTransactionOfUserInput
  create: UserCreateWithoutRefTransactionOfUserInput
}

input UserCreateNestedOneWithoutReplyInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReplyInput
  create: UserCreateWithoutReplyInput
}

input UserCreateNestedOneWithoutSponsorInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSponsorInput
  create: UserCreateWithoutSponsorInput
}

input UserCreateNestedOneWithoutTicketInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTicketInput
  create: UserCreateWithoutTicketInput
}

input UserCreateNestedOneWithoutTransactionApproverInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionApproverInput
  create: UserCreateWithoutTransactionApproverInput
}

input UserCreateOrConnectWithoutBuyPromotionCodeTransactionInput {
  create: UserCreateWithoutBuyPromotionCodeTransactionInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutConvertionTransactionInput {
  create: UserCreateWithoutConvertionTransactionInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutMainWalletInput {
  create: UserCreateWithoutMainWalletInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutMainWalletTransactionInput {
  create: UserCreateWithoutMainWalletTransactionInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPromotionCodeTransactionInput {
  create: UserCreateWithoutPromotionCodeTransactionInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRefInput {
  create: UserCreateWithoutRefInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRefTransactionOfSponsorInput {
  create: UserCreateWithoutRefTransactionOfSponsorInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRefTransactionOfUserInput {
  create: UserCreateWithoutRefTransactionOfUserInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReplyInput {
  create: UserCreateWithoutReplyInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSponsorInput {
  create: UserCreateWithoutSponsorInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTicketInput {
  create: UserCreateWithoutTicketInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTransactionApproverInput {
  create: UserCreateWithoutTransactionApproverInput!
  where: UserWhereUniqueInput!
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutBuyPromotionCodeTransactionInput {
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutUserInput
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  Ref: RefCreateNestedOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionCreateNestedManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionCreateNestedManyWithoutUserInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  Reply: ReplyCreateNestedManyWithoutUserInput
  role: UserRole
  Sponsor: RefCreateNestedManyWithoutSponsorInput
  Ticket: TicketCreateNestedManyWithoutUserInput
  TransactionApprover: MainWalletTransactionCreateNestedManyWithoutApproved_byInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutConvertionTransactionInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutUserInput
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  Ref: RefCreateNestedOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionCreateNestedManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionCreateNestedManyWithoutUserInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  Reply: ReplyCreateNestedManyWithoutUserInput
  role: UserRole
  Sponsor: RefCreateNestedManyWithoutSponsorInput
  Ticket: TicketCreateNestedManyWithoutUserInput
  TransactionApprover: MainWalletTransactionCreateNestedManyWithoutApproved_byInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutMainWalletInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutUserInput
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  Ref: RefCreateNestedOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionCreateNestedManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionCreateNestedManyWithoutUserInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  Reply: ReplyCreateNestedManyWithoutUserInput
  role: UserRole
  Sponsor: RefCreateNestedManyWithoutSponsorInput
  Ticket: TicketCreateNestedManyWithoutUserInput
  TransactionApprover: MainWalletTransactionCreateNestedManyWithoutApproved_byInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutMainWalletTransactionInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutUserInput
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  Ref: RefCreateNestedOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionCreateNestedManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionCreateNestedManyWithoutUserInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  Reply: ReplyCreateNestedManyWithoutUserInput
  role: UserRole
  Sponsor: RefCreateNestedManyWithoutSponsorInput
  Ticket: TicketCreateNestedManyWithoutUserInput
  TransactionApprover: MainWalletTransactionCreateNestedManyWithoutApproved_byInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutPromotionCodeTransactionInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  Ref: RefCreateNestedOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionCreateNestedManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionCreateNestedManyWithoutUserInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  Reply: ReplyCreateNestedManyWithoutUserInput
  role: UserRole
  Sponsor: RefCreateNestedManyWithoutSponsorInput
  Ticket: TicketCreateNestedManyWithoutUserInput
  TransactionApprover: MainWalletTransactionCreateNestedManyWithoutApproved_byInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutRefInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutUserInput
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  RefTransactionOfSponsor: RefTransactionCreateNestedManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionCreateNestedManyWithoutUserInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  Reply: ReplyCreateNestedManyWithoutUserInput
  role: UserRole
  Sponsor: RefCreateNestedManyWithoutSponsorInput
  Ticket: TicketCreateNestedManyWithoutUserInput
  TransactionApprover: MainWalletTransactionCreateNestedManyWithoutApproved_byInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutRefTransactionOfSponsorInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutUserInput
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  Ref: RefCreateNestedOneWithoutUserInput
  RefTransactionOfUser: RefTransactionCreateNestedManyWithoutUserInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  Reply: ReplyCreateNestedManyWithoutUserInput
  role: UserRole
  Sponsor: RefCreateNestedManyWithoutSponsorInput
  Ticket: TicketCreateNestedManyWithoutUserInput
  TransactionApprover: MainWalletTransactionCreateNestedManyWithoutApproved_byInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutRefTransactionOfUserInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutUserInput
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  Ref: RefCreateNestedOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionCreateNestedManyWithoutSponsorInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  Reply: ReplyCreateNestedManyWithoutUserInput
  role: UserRole
  Sponsor: RefCreateNestedManyWithoutSponsorInput
  Ticket: TicketCreateNestedManyWithoutUserInput
  TransactionApprover: MainWalletTransactionCreateNestedManyWithoutApproved_byInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutReplyInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutUserInput
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  Ref: RefCreateNestedOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionCreateNestedManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionCreateNestedManyWithoutUserInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  role: UserRole
  Sponsor: RefCreateNestedManyWithoutSponsorInput
  Ticket: TicketCreateNestedManyWithoutUserInput
  TransactionApprover: MainWalletTransactionCreateNestedManyWithoutApproved_byInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutSponsorInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutUserInput
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  Ref: RefCreateNestedOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionCreateNestedManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionCreateNestedManyWithoutUserInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  Reply: ReplyCreateNestedManyWithoutUserInput
  role: UserRole
  Ticket: TicketCreateNestedManyWithoutUserInput
  TransactionApprover: MainWalletTransactionCreateNestedManyWithoutApproved_byInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutTicketInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutUserInput
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  Ref: RefCreateNestedOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionCreateNestedManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionCreateNestedManyWithoutUserInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  Reply: ReplyCreateNestedManyWithoutUserInput
  role: UserRole
  Sponsor: RefCreateNestedManyWithoutSponsorInput
  TransactionApprover: MainWalletTransactionCreateNestedManyWithoutApproved_byInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

input UserCreateWithoutTransactionApproverInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionCreateNestedManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionCreateNestedManyWithoutUserInput
  country: CountryCreateNestedOneWithoutUsersInput
  createdAt: DateTime
  Device: DeviceCreateNestedManyWithoutUserInput
  email: String!
  id: String
  InternalTransaction: InternalTransactionCreateNestedManyWithoutUserInput
  ip: String
  is_active: Boolean
  MainWallet: MainWalletCreateNestedManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionCreateNestedManyWithoutUserInput
  ManualTransaction: ManualTransactionCreateNestedManyWithoutUserInput
  name: String
  Notification: NotificationCreateNestedManyWithoutUserInput
  password: String!
  permissions: UserCreatepermissionsInput
  phoneNumber: String
  PromotionCodeTransaction: PromotionCodeTransactionCreateNestedManyWithoutUserInput
  PromotionTransaction: PromotionTransactionCreateNestedManyWithoutUserInput
  Ref: RefCreateNestedOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionCreateNestedManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionCreateNestedManyWithoutUserInput
  RefundTransaction: RefundTransactionCreateNestedManyWithoutUserInput
  Reply: ReplyCreateNestedManyWithoutUserInput
  role: UserRole
  Sponsor: RefCreateNestedManyWithoutSponsorInput
  Ticket: TicketCreateNestedManyWithoutUserInput
  TwoFactor: TwoFactorCreateNestedManyWithoutUserInput
  updatedAt: DateTime
  username: String
  UserProfile: UserProfileCreateNestedOneWithoutUserInput
}

type UserPagination {
  nodes: [User]
  total: Int
}

type UserPorfolio {
  balance: Float
  createdAt: String
  email: String
  exchange_wallet_id: String
  id: String
  is_active: Boolean
  name: String
  role: UserRole
  total_bet: Int
  total_bet_amount: Float
  total_convert_in_amount: Float
  total_convert_out_amount: Float
  total_copytrade_commission_amount: Float
  total_gift_code_in_amount: Float
  total_manual_in_amount: Float
  total_manual_out_amount: Float
  total_receive_amount: Float
  total_ref_commission_amount: Float
  total_send_amount: Float
  total_win: Int
  total_win_amount: Float
  username: String
}

type UserProfile {
  avatar: String
  bio: String
  createdAt: DateTime!
  id: String!
  is_agency: Boolean!
  is_keep_ref_level: Boolean!
  is_notify_newsletter: Boolean!
  isEnableInternalTransfer: Boolean!
  profit_sharing: Float!
  ref_code: String!
  status: UserProfileStatus!
  updatedAt: DateTime!
  user_id: String!
}

input UserProfileCreateNestedOneWithoutUserInput {
  connect: UserProfileWhereUniqueInput
  connectOrCreate: UserProfileCreateOrConnectWithoutUserInput
  create: UserProfileCreateWithoutUserInput
}

input UserProfileCreateOrConnectWithoutUserInput {
  create: UserProfileCreateWithoutUserInput!
  where: UserProfileWhereUniqueInput!
}

input UserProfileCreateWithoutUserInput {
  admin_config_bypass_2fa: Boolean
  admin_config_ref_level: Int
  admin_config_withdraw_fee: Float
  avatar: String
  bio: String
  createdAt: DateTime
  id: String
  is_agency: Boolean
  is_free_withdraw: Boolean
  is_keep_ref_level: Boolean
  is_notify_newsletter: Boolean
  isEnableInternalTransfer: Boolean
  profit_sharing: Float
  ref_code: String!
  status: UserProfileStatus
  tbrTokenAddress: String
  updatedAt: DateTime
}

enum UserProfileStatus {
  BANNED
  FROZEN
  NORMAL
  SUSPENDED
}

input UserProfileUpdateOneWithoutUserInput {
  connect: UserProfileWhereUniqueInput
  connectOrCreate: UserProfileCreateOrConnectWithoutUserInput
  create: UserProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: UserProfileUpdateWithoutUserInput
  upsert: UserProfileUpsertWithoutUserInput
}

input UserProfileUpdateWithoutUserInput {
  admin_config_bypass_2fa: BoolFieldUpdateOperationsInput
  admin_config_ref_level: NullableIntFieldUpdateOperationsInput
  admin_config_withdraw_fee: NullableFloatFieldUpdateOperationsInput
  avatar: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_agency: BoolFieldUpdateOperationsInput
  is_free_withdraw: BoolFieldUpdateOperationsInput
  is_keep_ref_level: BoolFieldUpdateOperationsInput
  is_notify_newsletter: BoolFieldUpdateOperationsInput
  isEnableInternalTransfer: BoolFieldUpdateOperationsInput
  profit_sharing: FloatFieldUpdateOperationsInput
  ref_code: StringFieldUpdateOperationsInput
  status: EnumUserProfileStatusFieldUpdateOperationsInput
  tbrTokenAddress: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserProfileUpsertWithoutUserInput {
  create: UserProfileCreateWithoutUserInput!
  update: UserProfileUpdateWithoutUserInput!
}

input UserProfileWhereUniqueInput {
  id: String
  ref_code: String
  user_id: String
}

enum UserRole {
  ADMIN
  STAFF
  TRADER
}

type UserSumary {
  convertion: ConvertionSumaries
  general: WalletGeneral
}

input UserUpdateOneRequiredWithoutBuyPromotionCodeTransactionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutBuyPromotionCodeTransactionInput
  create: UserCreateWithoutBuyPromotionCodeTransactionInput
  update: UserUpdateWithoutBuyPromotionCodeTransactionInput
  upsert: UserUpsertWithoutBuyPromotionCodeTransactionInput
}

input UserUpdateOneRequiredWithoutConvertionTransactionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutConvertionTransactionInput
  create: UserCreateWithoutConvertionTransactionInput
  update: UserUpdateWithoutConvertionTransactionInput
  upsert: UserUpsertWithoutConvertionTransactionInput
}

input UserUpdateOneRequiredWithoutMainWalletInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMainWalletInput
  create: UserCreateWithoutMainWalletInput
  update: UserUpdateWithoutMainWalletInput
  upsert: UserUpsertWithoutMainWalletInput
}

input UserUpdateOneRequiredWithoutMainWalletTransactionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMainWalletTransactionInput
  create: UserCreateWithoutMainWalletTransactionInput
  update: UserUpdateWithoutMainWalletTransactionInput
  upsert: UserUpsertWithoutMainWalletTransactionInput
}

input UserUpdateOneRequiredWithoutPromotionCodeTransactionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPromotionCodeTransactionInput
  create: UserCreateWithoutPromotionCodeTransactionInput
  update: UserUpdateWithoutPromotionCodeTransactionInput
  upsert: UserUpsertWithoutPromotionCodeTransactionInput
}

input UserUpdateOneRequiredWithoutRefInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRefInput
  create: UserCreateWithoutRefInput
  update: UserUpdateWithoutRefInput
  upsert: UserUpsertWithoutRefInput
}

input UserUpdateOneRequiredWithoutReplyInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReplyInput
  create: UserCreateWithoutReplyInput
  update: UserUpdateWithoutReplyInput
  upsert: UserUpsertWithoutReplyInput
}

input UserUpdateOneRequiredWithoutSponsorInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSponsorInput
  create: UserCreateWithoutSponsorInput
  update: UserUpdateWithoutSponsorInput
  upsert: UserUpsertWithoutSponsorInput
}

input UserUpdateOneRequiredWithoutTicketInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTicketInput
  create: UserCreateWithoutTicketInput
  update: UserUpdateWithoutTicketInput
  upsert: UserUpsertWithoutTicketInput
}

input UserUpdateOneWithoutRefTransactionOfSponsorInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRefTransactionOfSponsorInput
  create: UserCreateWithoutRefTransactionOfSponsorInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutRefTransactionOfSponsorInput
  upsert: UserUpsertWithoutRefTransactionOfSponsorInput
}

input UserUpdateOneWithoutRefTransactionOfUserInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRefTransactionOfUserInput
  create: UserCreateWithoutRefTransactionOfUserInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutRefTransactionOfUserInput
  upsert: UserUpsertWithoutRefTransactionOfUserInput
}

input UserUpdateOneWithoutTransactionApproverInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTransactionApproverInput
  create: UserCreateWithoutTransactionApproverInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutTransactionApproverInput
  upsert: UserUpsertWithoutTransactionApproverInput
}

input UserUpdatepermissionsInput {
  push: Permission
  set: [Permission!]
}

input UserUpdateWithoutBuyPromotionCodeTransactionInput {
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutUserInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  Ref: RefUpdateOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionUpdateManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionUpdateManyWithoutUserInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  Reply: ReplyUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Sponsor: RefUpdateManyWithoutSponsorInput
  Ticket: TicketUpdateManyWithoutUserInput
  TransactionApprover: MainWalletTransactionUpdateManyWithoutApproved_byInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutConvertionTransactionInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutUserInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  Ref: RefUpdateOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionUpdateManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionUpdateManyWithoutUserInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  Reply: ReplyUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Sponsor: RefUpdateManyWithoutSponsorInput
  Ticket: TicketUpdateManyWithoutUserInput
  TransactionApprover: MainWalletTransactionUpdateManyWithoutApproved_byInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutMainWalletInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutUserInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  Ref: RefUpdateOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionUpdateManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionUpdateManyWithoutUserInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  Reply: ReplyUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Sponsor: RefUpdateManyWithoutSponsorInput
  Ticket: TicketUpdateManyWithoutUserInput
  TransactionApprover: MainWalletTransactionUpdateManyWithoutApproved_byInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutMainWalletTransactionInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutUserInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  Ref: RefUpdateOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionUpdateManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionUpdateManyWithoutUserInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  Reply: ReplyUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Sponsor: RefUpdateManyWithoutSponsorInput
  Ticket: TicketUpdateManyWithoutUserInput
  TransactionApprover: MainWalletTransactionUpdateManyWithoutApproved_byInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutPromotionCodeTransactionInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  Ref: RefUpdateOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionUpdateManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionUpdateManyWithoutUserInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  Reply: ReplyUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Sponsor: RefUpdateManyWithoutSponsorInput
  Ticket: TicketUpdateManyWithoutUserInput
  TransactionApprover: MainWalletTransactionUpdateManyWithoutApproved_byInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutRefInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutUserInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  RefTransactionOfSponsor: RefTransactionUpdateManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionUpdateManyWithoutUserInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  Reply: ReplyUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Sponsor: RefUpdateManyWithoutSponsorInput
  Ticket: TicketUpdateManyWithoutUserInput
  TransactionApprover: MainWalletTransactionUpdateManyWithoutApproved_byInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutRefTransactionOfSponsorInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutUserInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  Ref: RefUpdateOneWithoutUserInput
  RefTransactionOfUser: RefTransactionUpdateManyWithoutUserInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  Reply: ReplyUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Sponsor: RefUpdateManyWithoutSponsorInput
  Ticket: TicketUpdateManyWithoutUserInput
  TransactionApprover: MainWalletTransactionUpdateManyWithoutApproved_byInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutRefTransactionOfUserInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutUserInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  Ref: RefUpdateOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionUpdateManyWithoutSponsorInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  Reply: ReplyUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Sponsor: RefUpdateManyWithoutSponsorInput
  Ticket: TicketUpdateManyWithoutUserInput
  TransactionApprover: MainWalletTransactionUpdateManyWithoutApproved_byInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutReplyInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutUserInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  Ref: RefUpdateOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionUpdateManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionUpdateManyWithoutUserInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Sponsor: RefUpdateManyWithoutSponsorInput
  Ticket: TicketUpdateManyWithoutUserInput
  TransactionApprover: MainWalletTransactionUpdateManyWithoutApproved_byInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutSponsorInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutUserInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  Ref: RefUpdateOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionUpdateManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionUpdateManyWithoutUserInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  Reply: ReplyUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Ticket: TicketUpdateManyWithoutUserInput
  TransactionApprover: MainWalletTransactionUpdateManyWithoutApproved_byInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutTicketInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutUserInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  Ref: RefUpdateOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionUpdateManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionUpdateManyWithoutUserInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  Reply: ReplyUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Sponsor: RefUpdateManyWithoutSponsorInput
  TransactionApprover: MainWalletTransactionUpdateManyWithoutApproved_byInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutTransactionApproverInput {
  BuyPromotionCodeTransaction: BuyPromotionCodeTransactionUpdateManyWithoutUserInput
  ConvertionTransaction: ConvertionTransactionUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  InternalTransaction: InternalTransactionUpdateManyWithoutUserInput
  ip: NullableStringFieldUpdateOperationsInput
  is_active: BoolFieldUpdateOperationsInput
  MainWallet: MainWalletUpdateManyWithoutUserInput
  MainWalletTransaction: MainWalletTransactionUpdateManyWithoutUserInput
  ManualTransaction: ManualTransactionUpdateManyWithoutUserInput
  name: NullableStringFieldUpdateOperationsInput
  Notification: NotificationUpdateManyWithoutUserInput
  password: StringFieldUpdateOperationsInput
  permissions: UserUpdatepermissionsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  PromotionCodeTransaction: PromotionCodeTransactionUpdateManyWithoutUserInput
  PromotionTransaction: PromotionTransactionUpdateManyWithoutUserInput
  Ref: RefUpdateOneWithoutUserInput
  RefTransactionOfSponsor: RefTransactionUpdateManyWithoutSponsorInput
  RefTransactionOfUser: RefTransactionUpdateManyWithoutUserInput
  RefundTransaction: RefundTransactionUpdateManyWithoutUserInput
  Reply: ReplyUpdateManyWithoutUserInput
  role: EnumUserRoleFieldUpdateOperationsInput
  Sponsor: RefUpdateManyWithoutSponsorInput
  Ticket: TicketUpdateManyWithoutUserInput
  TwoFactor: TwoFactorUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
  UserProfile: UserProfileUpdateOneWithoutUserInput
}

input UserUpsertWithoutBuyPromotionCodeTransactionInput {
  create: UserCreateWithoutBuyPromotionCodeTransactionInput!
  update: UserUpdateWithoutBuyPromotionCodeTransactionInput!
}

input UserUpsertWithoutConvertionTransactionInput {
  create: UserCreateWithoutConvertionTransactionInput!
  update: UserUpdateWithoutConvertionTransactionInput!
}

input UserUpsertWithoutMainWalletInput {
  create: UserCreateWithoutMainWalletInput!
  update: UserUpdateWithoutMainWalletInput!
}

input UserUpsertWithoutMainWalletTransactionInput {
  create: UserCreateWithoutMainWalletTransactionInput!
  update: UserUpdateWithoutMainWalletTransactionInput!
}

input UserUpsertWithoutPromotionCodeTransactionInput {
  create: UserCreateWithoutPromotionCodeTransactionInput!
  update: UserUpdateWithoutPromotionCodeTransactionInput!
}

input UserUpsertWithoutRefInput {
  create: UserCreateWithoutRefInput!
  update: UserUpdateWithoutRefInput!
}

input UserUpsertWithoutRefTransactionOfSponsorInput {
  create: UserCreateWithoutRefTransactionOfSponsorInput!
  update: UserUpdateWithoutRefTransactionOfSponsorInput!
}

input UserUpsertWithoutRefTransactionOfUserInput {
  create: UserCreateWithoutRefTransactionOfUserInput!
  update: UserUpdateWithoutRefTransactionOfUserInput!
}

input UserUpsertWithoutReplyInput {
  create: UserCreateWithoutReplyInput!
  update: UserUpdateWithoutReplyInput!
}

input UserUpsertWithoutSponsorInput {
  create: UserCreateWithoutSponsorInput!
  update: UserUpdateWithoutSponsorInput!
}

input UserUpsertWithoutTicketInput {
  create: UserCreateWithoutTicketInput!
  update: UserUpdateWithoutTicketInput!
}

input UserUpsertWithoutTransactionApproverInput {
  create: UserCreateWithoutTransactionApproverInput!
  update: UserUpdateWithoutTransactionApproverInput!
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}

enum WalletChangeEventType {
  CONVERT
  DEPOSIT
  MANUAL
  TRANSACTION
  WITHDRAW
}

type WalletGeneral {
  balance: Float
  deposit: Float
  pendingWithdraw: Float
  withdraw: Float
}

type WalletSumary {
  balance: Float
  convertIn: Float
  convertOut: Float
  deposit: Float
  manualIn: Float
  pendingWithdraw: Float
  totalIn: Float
  totalOut: Float
  withdraw: Float
}

type WithdrawPayload {
  success: Boolean
}
